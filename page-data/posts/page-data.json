{
    "componentChunkName": "component---src-templates-category-template-js",
    "path": "/posts",
    "result": {"pageContext":{"currentCategory":"All","edges":[{"node":{"id":"52e5803d-bf0b-5f07-aa36-e75d5d721256","excerpt":"일단 프로세스 스케쥴링 알고리즘에 대해서 언급하기 전에, 프로세스의 상태와 Context-Switching에 대해서 알아야 한다. 여러가지 프로세스의 상태를 기반으로 전이(Transition)되며 이를 바탕으로 스케쥴링 알고리즘이 이루어진다. 프로세스의 상태  프로세스의 상태는 OS에 따라서 개수도 다르고, 명칭도 조금 다르지만, 가장 대표적인 그림은 위의 상태와 같다.  : 프로세스가 생성된 상태이다. 이때는 Readuy Queue 안에 들어 있지 않기 때문에 CPU를 받을 대상이 아니다.  : 프로세스가 CPU를 할당받기 위해 대기하는 상태이다. 보통 Ready Queue 안에 들어와있는 상태라고 얘기한다. 스케쥴링의 대상이 된다.  : 현재 CPU를 할당받아 작업중인 상태다. Single core 시스템에서는 1개다.  : 프로세스가 입출력이나 이벤트가 끝나기를 기다리는 상태이다.  : 프로세스가 종료된 상태다. 단 프로세스 구조체가 사라진 것은 아니다. 그림에서 프로세스의 …","fields":{"slug":"/process-scheduling-algorithm/"},"frontmatter":{"categories":"운영체제","title":"프로세스 스케쥴링 알고리즘","date":"December 25, 2021"}},"next":{"fields":{"slug":"/process-and-thread/"}},"previous":null},{"node":{"id":"d35d9a2d-dc83-5898-a8d1-3b9f7d2f1a79","excerpt":"프로세스란, 실행중인 프로그램을 의미한다.\n프로그램을 실행하기 위해서는 주소공간,파일,메모리 등이 필요한데 운영체제로부터 이런 것을 할당받은 프로그램을 프로세스라 한다. 프로그램은 어떤 작업을 수행하기 위한 파일로써 정적인 상태이고, 프로세스는 그 작업을 수행하는 동적인 상태다. 프로세스의 메모리 구조 프로세스는 아래 그림과 같은 메모리 구조를 띄고 있다.  프로세스는 각자 본인이 사용하는 메모리 영역과 레지스터 값을 가진다. 프로세스의 메모리 영역은 코드,데이터,힙,스택 영역으로 구성된다. 코드 : 사용자가 작성한 프로그램 함수들의 코드가 기계어 명령 형태로 변경되어 저장되는 공간 데이터 : 전역 변수 또는 static 변수 등 프로그램이 사용하는 데이터를 저장하는 공간 스택 : 함수의 복귀주소와 지역변수,매개변수,반환값을 저장하는 공간. 재귀함수가 반복되거나 지역변수가 너무 많으면 stack overflow 발생. 가변적이다. 힙 : 프로세스 실행 중에 런타임에 할당되는 영역.…","fields":{"slug":"/process-and-thread/"},"frontmatter":{"categories":"운영체제","title":"프로세스와 쓰레드","date":"December 25, 2021"}},"next":{"fields":{"slug":"/junior-student-challege-to-kakao-2022/"}},"previous":{"fields":{"slug":"/process-scheduling-algorithm/"}}},{"node":{"id":"79ae2a8f-01d0-50f4-814c-5192b56de742","excerpt":"도전기? 후기? 어느단어를 써야할지 한참 고민하다가 도전기로 선택했습니다.\n도전기로 선택한 이유는 결과와 상관없이 공채의 모든 과정에서 배운점이 굉장히 많았거든요. 그런면에선 개발자 취준생인 저의 성장기도 맞는 것 같습니다. 글이 굉장히,매우 호흡이 깁니다. 적당히 스크롤 내려가면서 스킵하면서 읽어주세요.. 공채 얘기만 궁금하시면 뜬금없는 블라인드 공채 목차쯤부터 보시면 됩니다. 조금 늦은 시작 저는 서울 소재 H대학교에서 컴퓨터계열을 전공하다 3학년을 수료하고 20년도 초에 사회복무요원으로 입대하게 되었습니다.\n여러가지 사정들로 군 복무가 굉장히 늦어졌고, 3학년을 마칠때까지 아직 진로에 대해서 확실히 정하지 못했습니다. 분명 개발을 좋아하고 적당히 실력도 있었지만, 그만큼 컴퓨터공학에 대한 열정도 있어서 진학 후 연구도 하고 싶었습니다. 개발자와 진학 중 하나를 선택하기 위해서는 일단 군 문제 먼저 해결해야한다고 생각해 일단 복무를 시작했습니다. 그러던 중, 5월쯤 취업한 친한…","fields":{"slug":"/junior-student-challege-to-kakao-2022/"},"frontmatter":{"categories":"회고","title":"3학년의 2022 카카오 블라인드 공채 도전기","date":"December 16, 2021"}},"next":{"fields":{"slug":"/java-gc/"}},"previous":{"fields":{"slug":"/process-and-thread/"}}},{"node":{"id":"b98e3e53-8195-5969-aa57-8c541f9543d1","excerpt":"GC를 수행하는 Garabage Collector는 아래와 같은 일을 한다. 메모리 할당 사용 중인 메모리 인식 미사용 메모리 인식 Stop-the-World 자바 애플리케이션은 GC 실행시 GC 실행 스레드를 제외한 모든 스레들르 멈추고, GC 완료 후 다시 스레드들을 실행 상태로 변경 Stop the World는 모든 애플리케이션 스레드들의 작업이 멈추는 상태 어떤 GC 알고리즘을 사용해도 Stop-the-World는 불가피하며 대개의 GC 튜닝이란 이 Stop-the-World 시간을 줄이는 것이다. 전제 가비지 컬렉터는 두가지 전제 조건 하에서 만들어졌다. 대부분의 객체는 금방 접근 불가능 상태(unreachable)가 된다. 오래된 객체에서 젊은 객체로의 참조는 아주 적게 존재한다. 이것을 ‘weak generational hypothesis’라고 하는데 이것을 살리기 위해서 Young 영역과 Old 영역으로 나누었다. Young 영역 (Young Generation 영역…","fields":{"slug":"/java-gc/"},"frontmatter":{"categories":"Java","title":"Java의 알쏭달쏭한 GC","date":"November 05, 2021"}},"next":{"fields":{"slug":"/how-spring-handler-mapping-works-2/"}},"previous":{"fields":{"slug":"/junior-student-challege-to-kakao-2022/"}}},{"node":{"id":"9f73b4bb-d5a7-5501-955c-6499d6b7bb91","excerpt":"MappingRegistry 는 아까 살펴본 의 내부 클래스다. 는 handler method에 대한 모든 mapping을 유지 관리하고 을 수행하는 method를 가지고 있고 동시성을 가진 접근을 가능하게 해주는 레지스트리다. A registry that maintains all mappings to handler methods, exposing methods to perform lookups and providing concurrent access. Package-private for testing purposes. 가장 중요한 부분이 handler method에 대한 모든 mapping을 유지 관리하고 을 수행하는 method를 가지고 있다는 것이다.  안에서  자료구조를 가진 멤버 변수들이 있다. 그 중에서이라는 자료구조를 사용한다. 이건 한개의 key에 여러 value들을 저장하는 을 으로 감싼 자료구조로 Spring이 만든 자료구조다. 은 의 자료구조인데, key는 을 …","fields":{"slug":"/how-spring-handler-mapping-works-2/"},"frontmatter":{"categories":"Spring","title":"Spring MVC - HandlerMapping의 동작방식 이해하기 2편","date":"November 05, 2021"}},"next":{"fields":{"slug":"/programmers-flip-card/"}},"previous":{"fields":{"slug":"/java-gc/"}}},{"node":{"id":"0c7c2f80-6616-5510-8a2f-9b8b7d26fef4","excerpt":"정답률 0.95퍼의 무시무시한 문제다.  문제 제목 카드 짝 맞추기 문제 설명 \n게임 개발자인 베로니는 개발 연습을 위해 다음과 같은 간단한 카드 짝맞추기 보드 게임을 개발해 보려고 합니다.\n게임이 시작되면 화면에는 카드 16장이 뒷면을 위로하여 4 x 4 크기의 격자 형태로 표시되어 있습니다. 각 카드의 앞면에는 카카오프렌즈 캐릭터 그림이 그려져 있으며, 8가지의 캐릭터 그림이 그려진 카드가 각기 2장씩 화면에 무작위로 배치되어 있습니다.\n유저가 카드를 2장 선택하여 앞면으로 뒤집었을 때 같은 그림이 그려진 카드면 해당 카드는 게임 화면에서 사라지며, 같은 그림이 아니라면 원래 상태로 뒷면이 보이도록 뒤집힙니다. 이와 같은 방법으로 모든 카드를 화면에서 사라지게 하면 게임이 종료됩니다. 게임에서 카드를 선택하는 방법은 다음과 같습니다. 카드는 커서를 이용해서 선택할 수 있습니다. 커서는 4 x 4 화면에서 유저가 선택한 현재 위치를 표시하는 “굵고 빨간 테두리 상자”를 의미합니다…","fields":{"slug":"/programmers-flip-card/"},"frontmatter":{"categories":"PS","title":"프로그래머스 - 카드 짝 맞추기 (2021 카카오 블라인드 공채)","date":"September 16, 2021"}},"next":{"fields":{"slug":"/secret-of-set-in-python/"}},"previous":{"fields":{"slug":"/how-spring-handler-mapping-works-2/"}}},{"node":{"id":"ebd8884b-23b5-5248-869a-2e0428b7f545","excerpt":"문제 상황 백준 빵집를 풀때 이상한 점이 확실히 생겼다.  일반적으로 python에서 방문 여부를 확인하기 위해 과 중에 하나를 사용한다.\n같은 경우는 잘못된 접근 같은 행동에서 안전한 편이고 대부분의 기능에서 의 시간이 보장된다고 알고 있기 때문에 을 이용한 풀이를 종종했다. List에서는 미숙한 코드로 indexError를 경험할 수 있다. 이 문제는 naive 하게 을 사용하면 시간초과를 당한다. 처음엔 논리를 잘못 구성해 recursionDepth가 커져서 시간초과가 나는건가 라고 생각했지만 논리에는 문제가 없었다. 그래서 만을 로 바꿔주었더니 통과했다. 분명 도 똑같이 이고 에서는 도 이라고 알고 있는데 왜 차이가 나는 것일까? 이 이해 안되는 상황을 지금부터 알아보자. 메모리 사용량 먼저 간단하게 두 자료구조의 메모리 사용량을 비교해보았다. 아래 코드는 10000개의 행 , 500개의 열을 가진 2차원 board에서 사용되는 방문을 기록하는 일반적인 구현이다. 하나는 로…","fields":{"slug":"/secret-of-set-in-python/"},"frontmatter":{"categories":"Python","title":"Python 3의 Set 훔쳐보기","date":"August 07, 2021"}},"next":{"fields":{"slug":"/programmers-build-race-road/"}},"previous":{"fields":{"slug":"/programmers-flip-card/"}}},{"node":{"id":"7e6fc637-3537-5c6c-a4e5-2097e169e8ca","excerpt":"문제 제목 경주로 건설 문제 설명 \n건설회사의 설계사인 죠르디는 고객사로부터 자동차 경주로 건설에 필요한 견적을 의뢰받았습니다.\n제공된 경주로 설계 도면에 따르면 경주로 부지는 N x N 크기의 정사각형 격자 형태이며 각 격자는 1 x 1 크기입니다.\n설계 도면에는 각 격자의 칸은 0 또는 1 로 채워져 있으며, 0은 칸이 비어 있음을 1은 해당 칸이 벽으로 채워져 있음을 나타냅니다.\n경주로의 출발점은 (0, 0) 칸(좌측 상단)이며, 도착점은 (N-1, N-1) 칸(우측 하단)입니다. 죠르디는 출발점인 (0, 0) 칸에서 출발한 자동차가 도착점인 (N-1, N-1) 칸까지 무사히 도달할 수 있게 중간에 끊기지 않도록 경주로를 건설해야 합니다.\n경주로는 상, 하, 좌, 우로 인접한 두 빈 칸을 연결하여 건설할 수 있으며, 벽이 있는 칸에는 경주로를 건설할 수 없습니다.\n이때, 인접한 두 빈 칸을 상하 또는 좌우로 연결한 경주로를 직선 도로 라고 합니다.\n또한 두 직선 도로가 서로 …","fields":{"slug":"/programmers-build-race-road/"},"frontmatter":{"categories":"PS","title":"프로그래머스 - 경주로 건설 (2020 카카오 인턴쉽)","date":"July 15, 2021"}},"next":{"fields":{"slug":"/do-i-need-an-interface-with-spring-boot/"}},"previous":{"fields":{"slug":"/secret-of-set-in-python/"}}},{"node":{"id":"5ca018d3-2146-5d17-ad98-699a8e12e7f0","excerpt":"본 글은 Do I need an interface with Spring boot?을 번역한 글입니다. 잘 쓰여진 글을 정리 하는 겸 한글로 공유하고 싶어서 번역했습니다. 들어가면서 Spring boot를 사용하다보면, 종종  ( annotation을 붙인 bean)을 사용하게 된다. 인터넷 상의 많은 예시에서, 사람들이 들을 위해서 를 사용하는 걸 볼 수 있을것이다. 예를 들어서 , 우리가 todo 어플리케이션을 만든다고 할때, 라는 와 이라는 구현체를 만들때가 있다. 이 포스트에서, 우리는 왜 그런 것을 하는지와 필요한가에 대해서 알아볼 것이다. 짧은 결론은 짧은 결론은 꽤나 간단하다. ** 를 만들 필요 없다. ** 를 만든다고 하면, class의 자체의 이름을 라고 하고 를 통해서 bean들에 주입하면 된다. 예를 들어서 이런 코드가 있다고 해보자. 위에 있는 예시는 를 이용한 field injection을 사용하던 생성자 주입을 사용하던간에 작동할 것이다. 그럼 왜 신경써야…","fields":{"slug":"/do-i-need-an-interface-with-spring-boot/"},"frontmatter":{"categories":"Spring","title":"Spring Boot에서 interface를 사용해야 할까? (Do I need an interface with Spring boot?)","date":"July 15, 2021"}},"next":{"fields":{"slug":"/how-spring-handler-mapping-works-1/"}},"previous":{"fields":{"slug":"/programmers-build-race-road/"}}},{"node":{"id":"775850b9-bf7d-5165-a970-117498904ad5","excerpt":"글이 매우 복잡하고 깁니다. 양해 부탁드립니다. 틀린 정보나 이해가 가지 않는 부분은 댓글 남겨주시면 참고하겠습니다. HandlerMapping의 역할 Spring MVC에 대해서 공부하던 중, 이 request를 처리하기에 적절한 handler를 찾아온다는 설명을 들었다.\n좀 더 찾아보니 은 request의 URL과 매칭되는 handler를 선택하는 역할을 수행한다 는 것을 보았다. request의 URL만 보고 어떻게 찾아온다는 것일까? 그리고 찾아진 handler는 method인데 어떠한 방식으로 가져온다는 것일까? 한가지만 기억하고 가자.\nHandlerMapping은 원하는 handler를 찾아오는 역할을 수행한다. Spring MVC Request flow 의 역할에 대해서 살펴보기 전에 Spring MVC에서 request가 어떠한 순서로 처리되는지 먼저 보아야 한다.\n처리 순서 먼저 의 역할을 하는 이 request를 받는다. 은 적절한 controller를 선택하는 …","fields":{"slug":"/how-spring-handler-mapping-works-1/"},"frontmatter":{"categories":"Spring","title":"Spring MVC - HandlerMapping의 동작방식 이해하기 1편","date":"June 09, 2021"}},"next":{"fields":{"slug":"/12904-A-and-B/"}},"previous":{"fields":{"slug":"/do-i-need-an-interface-with-spring-boot/"}}},{"node":{"id":"fab54913-676d-5548-a4f9-d4855a8db7cc","excerpt":"문제 제목 12904번 A와 B 문제 설명 수빈이는 A와 B로만 이루어진 영어 단어가 존재한다는 사실에 놀랐다. 대표적인 예로 AB (Abdominal의 약자), BAA (양의 울음 소리), AA (용암의 종류), ABBA (스웨덴 팝 그룹)이 있다. 이런 사실에 놀란 수빈이는 간단한 게임을 만들기로 했다. 두 문자열 S와 T가 주어졌을 때, S를 T로 바꾸는 게임이다. 문자열을 바꿀 때는 다음과 같은 두 가지 연산만 가능하다. 문자열의 뒤에 A를 추가한다. 문자열을 뒤집고 뒤에 B를 추가한다. 주어진 조건을 이용해서 S를 T로 만들 수 있는지 없는지 알아내는 프로그램을 작성하시오. 입력 첫째 줄에 S가 둘째 줄에 T가 주어진다. (1 ≤ S의 길이 ≤ 999, 2 ≤ T의 길이 ≤ 1000, S의 길이 < T의 길이) 출력 S를 T로 바꿀 수 있으면 1을 없으면 0을 출력한다. 예제 입출력 입력 출력 풀이 가장 먼저 생각난 풀이는 백트래킹을 사용해서 S가 T를 만드는 방법이였다.…","fields":{"slug":"/12904-A-and-B/"},"frontmatter":{"categories":"PS","title":"백준 12904 - A와 B","date":"March 30, 2021"}},"next":{"fields":{"slug":"/starategy-design-pattern-with-in-spring-boot-application/"}},"previous":{"fields":{"slug":"/how-spring-handler-mapping-works-1/"}}},{"node":{"id":"38eb533d-218e-57a9-bff7-fb7a95946fca","excerpt":"본 글은 Strategy Design Pattern with in Spring Boot application.을 번역한 글입니다. 잘 쓰여진 글을 정리 하는 겸 한글로 공유하고 싶어서 번역했습니다. 전략 디자인 패턴은 실행 중에 알고리즘을 선택하게 해주는 행동 디자인 패턴이다. 전략 디자인 패턴의 의도는 다음과 같다 :\n“알고리즘 집합을 선언하고, 각각을 캡슐화하며 그것들을 교체가 가능하게 만든다. 전략 패턴은 알고리즘을 사용하는 유저와는 독립적으로 알고리즘을 다양하게끔 한다.” UML Class와 sequence diagram 전략 패턴의 다이어그램\n전략 디자인 패턴을 설명하고 다양한 언어로 그것을 구현하는 많은 글들이 시중에 있다.\n이 글의 목적은 스프링 부트 어플리케이션에서 전략 패턴을 어떻게 구현하는지 알려주는 것이다. 스프링 부트 스프링 부트는 Java microservice 개발의 실질적 표준이 되었다. 스프링 부트 어플리케이션에서 자주 쓰이는 디자인 패턴들을 어떻게 구…","fields":{"slug":"/starategy-design-pattern-with-in-spring-boot-application/"},"frontmatter":{"categories":"Spring","title":"스프링 부트 어플리케이션의 전략 패턴(Strategy Design Pattern with in Spring Boot application)","date":"January 30, 2021"}},"next":null,"previous":{"fields":{"slug":"/12904-A-and-B/"}}}],"categories":["All","운영체제","회고","Java","Spring","PS","Python"]}},
    "staticQueryHashes": ["1073350324","1956554647","2938748437"]}