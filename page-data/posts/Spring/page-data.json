{
    "componentChunkName": "component---src-templates-category-template-js",
    "path": "/posts/Spring",
    "result": {"pageContext":{"currentCategory":"Spring","categories":["All","운영체제","회고","Java","Spring","PS","Python"],"edges":[{"node":{"id":"9f73b4bb-d5a7-5501-955c-6499d6b7bb91","excerpt":"MappingRegistry 는 아까 살펴본 의 내부 클래스다. 는 handler method에 대한 모든 mapping을 유지 관리하고 을 수행하는 method를 가지고 있고 동시성을 가진 접근을 가능하게 해주는 레지스트리다. A registry that maintains all mappings to handler methods, exposing methods to perform lookups and providing concurrent access. Package-private for testing purposes. 가장 중요한 부분이 handler method에 대한 모든 mapping을 유지 관리하고 을 수행하는 method를 가지고 있다는 것이다.  안에서  자료구조를 가진 멤버 변수들이 있다. 그 중에서이라는 자료구조를 사용한다. 이건 한개의 key에 여러 value들을 저장하는 을 으로 감싼 자료구조로 Spring이 만든 자료구조다. 은 의 자료구조인데, key는 을 …","fields":{"slug":"/how-spring-handler-mapping-works-2/"},"frontmatter":{"categories":"Spring","title":"Spring MVC - HandlerMapping의 동작방식 이해하기 2편","date":"November 05, 2021"}},"next":{"fields":{"slug":"/programmers-flip-card/"}},"previous":{"fields":{"slug":"/java-gc/"}}},{"node":{"id":"5ca018d3-2146-5d17-ad98-699a8e12e7f0","excerpt":"본 글은 Do I need an interface with Spring boot?을 번역한 글입니다. 잘 쓰여진 글을 정리 하는 겸 한글로 공유하고 싶어서 번역했습니다. 들어가면서 Spring boot를 사용하다보면, 종종  ( annotation을 붙인 bean)을 사용하게 된다. 인터넷 상의 많은 예시에서, 사람들이 들을 위해서 를 사용하는 걸 볼 수 있을것이다. 예를 들어서 , 우리가 todo 어플리케이션을 만든다고 할때, 라는 와 이라는 구현체를 만들때가 있다. 이 포스트에서, 우리는 왜 그런 것을 하는지와 필요한가에 대해서 알아볼 것이다. 짧은 결론은 짧은 결론은 꽤나 간단하다. ** 를 만들 필요 없다. ** 를 만든다고 하면, class의 자체의 이름을 라고 하고 를 통해서 bean들에 주입하면 된다. 예를 들어서 이런 코드가 있다고 해보자. 위에 있는 예시는 를 이용한 field injection을 사용하던 생성자 주입을 사용하던간에 작동할 것이다. 그럼 왜 신경써야…","fields":{"slug":"/do-i-need-an-interface-with-spring-boot/"},"frontmatter":{"categories":"Spring","title":"Spring Boot에서 interface를 사용해야 할까? (Do I need an interface with Spring boot?)","date":"July 15, 2021"}},"next":{"fields":{"slug":"/how-spring-handler-mapping-works-1/"}},"previous":{"fields":{"slug":"/programmers-build-race-road/"}}},{"node":{"id":"775850b9-bf7d-5165-a970-117498904ad5","excerpt":"글이 매우 복잡하고 깁니다. 양해 부탁드립니다. 틀린 정보나 이해가 가지 않는 부분은 댓글 남겨주시면 참고하겠습니다. HandlerMapping의 역할 Spring MVC에 대해서 공부하던 중, 이 request를 처리하기에 적절한 handler를 찾아온다는 설명을 들었다.\n좀 더 찾아보니 은 request의 URL과 매칭되는 handler를 선택하는 역할을 수행한다 는 것을 보았다. request의 URL만 보고 어떻게 찾아온다는 것일까? 그리고 찾아진 handler는 method인데 어떠한 방식으로 가져온다는 것일까? 한가지만 기억하고 가자.\nHandlerMapping은 원하는 handler를 찾아오는 역할을 수행한다. Spring MVC Request flow 의 역할에 대해서 살펴보기 전에 Spring MVC에서 request가 어떠한 순서로 처리되는지 먼저 보아야 한다.\n처리 순서 먼저 의 역할을 하는 이 request를 받는다. 은 적절한 controller를 선택하는 …","fields":{"slug":"/how-spring-handler-mapping-works-1/"},"frontmatter":{"categories":"Spring","title":"Spring MVC - HandlerMapping의 동작방식 이해하기 1편","date":"June 09, 2021"}},"next":{"fields":{"slug":"/starategy-design-pattern-with-in-spring-boot-application/"}},"previous":{"fields":{"slug":"/do-i-need-an-interface-with-spring-boot/"}}},{"node":{"id":"38eb533d-218e-57a9-bff7-fb7a95946fca","excerpt":"본 글은 Strategy Design Pattern with in Spring Boot application.을 번역한 글입니다. 잘 쓰여진 글을 정리 하는 겸 한글로 공유하고 싶어서 번역했습니다. 전략 디자인 패턴은 실행 중에 알고리즘을 선택하게 해주는 행동 디자인 패턴이다. 전략 디자인 패턴의 의도는 다음과 같다 :\n“알고리즘 집합을 선언하고, 각각을 캡슐화하며 그것들을 교체가 가능하게 만든다. 전략 패턴은 알고리즘을 사용하는 유저와는 독립적으로 알고리즘을 다양하게끔 한다.” UML Class와 sequence diagram 전략 패턴의 다이어그램\n전략 디자인 패턴을 설명하고 다양한 언어로 그것을 구현하는 많은 글들이 시중에 있다.\n이 글의 목적은 스프링 부트 어플리케이션에서 전략 패턴을 어떻게 구현하는지 알려주는 것이다. 스프링 부트 스프링 부트는 Java microservice 개발의 실질적 표준이 되었다. 스프링 부트 어플리케이션에서 자주 쓰이는 디자인 패턴들을 어떻게 구…","fields":{"slug":"/starategy-design-pattern-with-in-spring-boot-application/"},"frontmatter":{"categories":"Spring","title":"스프링 부트 어플리케이션의 전략 패턴(Strategy Design Pattern with in Spring Boot application)","date":"January 30, 2021"}},"next":null,"previous":{"fields":{"slug":"/how-spring-handler-mapping-works-1/"}}}]}},
    "staticQueryHashes": ["1073350324","1956554647","2938748437"]}