{
    "componentChunkName": "component---src-templates-category-template-js",
    "path": "/posts/자료구조",
    "result": {"pageContext":{"currentCategory":"자료구조","categories":["All","자료구조","Java","운영체제","회고","Spring","PS","Python"],"edges":[{"node":{"id":"900d1f47-ef6d-5598-b1bb-f6ffd1f5c715","excerpt":"Stack 선형자료구조의 일종으로 LIFO의 특성을 가지고 있다. 가장 처음 들어간 원소가 가장 나중에 접근 가능 하고, 다시 말해서 호출 시에 가장 최근의 원소에 접근 할 수 있다. 의 공간복잡도를 가진다. 링크드 리스트를 이용한 구현과 배열을 이용한(정확히는 Dynamic Array) 두가지 버전이 있다. 링크드 리스트는 일관적인 시간복잡도 를 보여주는 대신에 추가적인 메모리 사용량(Node 구조를 유지하는데 드는)과 메모리 할당에 추가적인 비용이 들 수 있다. 조회 : Top에 있는 원소를 조회할때는 , 하지만 특정한 데이터를 찾고자 할때는 이다. 삽입 : 링크드 리스트를 이용한 구현에서는 단순히 기존의 Top 원소를 새 원소의  로 연결시켜주고  의 포인터에 새로운 원소를 연결시켜주면 되기 때문에 이다. 배열을 이용한 구현에서도 특정 상황(Dynamic array의 팽창)을 제외하고는 이니 이다. 삭제 : 링크드 리스트와 배열 모두 이다. 활용 Stack Usage : JV…","fields":{"slug":"/stack-and-queue/"},"frontmatter":{"categories":"자료구조","title":"Stack과 Queue","date":"February 05, 2022"}},"next":{"fields":{"slug":"/jvm-change-in-java8/"}},"previous":null},{"node":{"id":"a0255f2f-f9e3-5e68-8b8b-192aaa664f95","excerpt":"내부적으로 배열을 사용하여 조회,삽입,삭제 모두 안에 수행하기 위한 특별한 자료구조다. 배열의 인덱스를 유일하게(혹은 그에 가깝게) 지정하기 위해서 데이터와 연관된 고유한 숫자를 만들어낸 후 그것을 인덱스로 사용한다. 또 일반적으로 순서를 보장하지 않기 때문에, 순서, 관계가 있는 목적에는 적합하지 않다. Hash funciton 데이터에 연관된 고유한 값을 만들기 위해서 해시 함수를 사용한다. 이 해시 함수를 통해서 나온 결과값을 해시 값(혹은 해쉬 코드,해쉬)라고 하고 이것을 이용해 데이터에 대한 접근 연산을 수행한다. 가장 많이 쓰이는 해시 함수는 나머지 연산(modulo)를 이용한다. 키  를 어떤 정해진 수  로 나눈 나머지를  를 저장하는 버킷의 인덱스로 사용하는 것이다.\n→  일반적으로  는 적절히 큰 소수(prime number)를 사용하는데 이유는 다음과 같다. 만약 D를 소수가 아닌 값이라 하면, D의 모든 약수는 자신의 배수가 곧 키값이 된다. 해시충돌이 많이 …","fields":{"slug":"/hash-table/"},"frontmatter":{"categories":"자료구조","title":"Hash Table에 대해서 완전 자세하게 알아보자.","date":"January 10, 2022"}},"next":{"fields":{"slug":"/process-scheduling-algorithm/"}},"previous":{"fields":{"slug":"/jvm-change-in-java8/"}}}]}},
    "staticQueryHashes": ["1073350324","1956554647","2938748437"]}