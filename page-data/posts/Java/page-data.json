{
    "componentChunkName": "component---src-templates-category-template-js",
    "path": "/posts/Java",
    "result": {"pageContext":{"currentCategory":"Java","categories":["All","운영체제","회고","Spring","Java","PS","Python"],"edges":[{"node":{"id":"b98e3e53-8195-5969-aa57-8c541f9543d1","excerpt":"GC를 수행하는 Garabage Collector는 아래와 같은 일을 한다. 메모리 할당 사용 중인 메모리 인식 미사용 메모리 인식 Stop-the-World 자바 애플리케이션은 GC 실행시 GC 실행 스레드를 제외한 모든 스레들르 멈추고, GC 완료 후 다시 스레드들을 실행 상태로 변경 Stop the World는 모든 애플리케이션 스레드들의 작업이 멈추는 상태 어떤 GC 알고리즘을 사용해도 Stop-the-World는 불가피하며 대개의 GC 튜닝이란 이 Stop-the-World 시간을 줄이는 것이다. 전제 가비지 컬렉터는 두가지 전제 조건 하에서 만들어졌다. 대부분의 객체는 금방 접근 불가능 상태(unreachable)가 된다. 오래된 객체에서 젊은 객체로의 참조는 아주 적게 존재한다. 이것을 ‘weak generational hypothesis’라고 하는데 이것을 살리기 위해서 Young 영역과 Old 영역으로 나누었다. Young 영역 (Young Generation 영역…","fields":{"slug":"/java-gc/"},"frontmatter":{"categories":"Java","title":"Java의 알쏭달쏭한 GC","date":"November 05, 2021"}},"next":{"fields":{"slug":"/programmers-flip-card/"}},"previous":{"fields":{"slug":"/how-spring-handler-mapping-works-2/"}}}]}},
    "staticQueryHashes": ["1073350324","1956554647","2938748437"]}