{
    "componentChunkName": "component---src-templates-blog-template-js",
    "path": "/os-user-level-unix-shell/",
    "result": {"data":{"cur":{"id":"ae05463a-541b-597c-acfd-185ccfe382cc","html":"<h2 id=\"운영체제-과제-1--simple-user-level-unix-shell\" style=\"position:relative;\"><a href=\"#%EC%9A%B4%EC%98%81%EC%B2%B4%EC%A0%9C-%EA%B3%BC%EC%A0%9C-1--simple-user-level-unix-shell\" aria-label=\"운영체제 과제 1  simple user level unix shell permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>운영체제 과제 1 ( Simple User-level Unix Shell)</h2>\n<h3 id=\"테스트-환경-\" style=\"position:relative;\"><a href=\"#%ED%85%8C%EC%8A%A4%ED%8A%B8-%ED%99%98%EA%B2%BD-\" aria-label=\"테스트 환경  permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>테스트 환경 :</h3>\n<ul>\n<li>OS : Ubuntu 16.04</li>\n<li>gcc : gcc 5.4.0</li>\n</ul>\n<h3 id=\"개요-\" style=\"position:relative;\"><a href=\"#%EA%B0%9C%EC%9A%94-\" aria-label=\"개요  permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>개요 :</h3>\n<p>운영체제 첫번째 과제인 Simple User-level Unix shell에 대한 내용입니다.</p>\n<p>크게 <strong>interactvie mode</strong>와 <strong>batch mode</strong>로 나뉘어지고\n사용자가 입력한 명령 혹은 batch file을 읽어와서</p>\n<p>명령을 수행하고 그 결과를 출력하는 프로그램입니다.</p>\n<h3 id=\"작동과정-설명-\" style=\"position:relative;\"><a href=\"#%EC%9E%91%EB%8F%99%EA%B3%BC%EC%A0%95-%EC%84%A4%EB%AA%85-\" aria-label=\"작동과정 설명  permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>작동과정 설명 :</h3>\n<h2 id=\"interactvie-mode\" style=\"position:relative;\"><a href=\"#interactvie-mode\" aria-label=\"interactvie mode permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Interactvie Mode</h2>\n<p>첫번째로 <strong>interactvie mode</strong>내에서의 작동 과정과 예시입니다.\n크게 사용자로부터 <strong>입력을 받아오고</strong>,</p>\n<p>입력을 <strong>특정한 기준을 가지고 분할</strong>하여\n<strong>execvp 함수를 사용</strong>하여 처리합니다.</p>\n<ol>\n<li>fgets() 함수를 통해 사용자에게 입력을 받습니다.</li>\n<li>strtok 함수를 사용하여 semi-colon과 space를 기준으로 raw한 입력을 유의미하게 분할합니다.</li>\n<li>분할된 명령어들은 char* 이차원 배열에 저장됩니다.</li>\n<li>명령의 개수만큼 fork 함수를 통해 자식프로세스를 생성합니다.</li>\n<li>자식프로세스안에서 execvp 함수를 통해 저장된 명령어를 처리합니다.</li>\n<li>부모 프로세스에서는 모든 자식프로세스가 끝나기를 기다린후, 모두 종료되면 다시 1번으로 돌아가도록 유도합니다.</li>\n</ol>\n<p>만약 이 과정에서 에러가 검출된다면 유저에게 알려줍니다.</p>\n<hr>\n<h3 id=\"작동예시-\" style=\"position:relative;\"><a href=\"#%EC%9E%91%EB%8F%99%EC%98%88%EC%8B%9C-\" aria-label=\"작동예시  permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>작동예시 :</h3>\n<p>실행된 후 먼저 사용자가 명령을 입력할때까지 프로그램은 대기합니다.</p>\n<p>그 후 사용자가 명령을 입력하면 (ex.ls -al)</p>\n<p><code class=\"language-text\">> ls -al</code>\n<img src=\"/uploads/9f4f1d35d29ff4432bb78e3e95f44c58/image.png\" alt=\"image\">\n위와 같이 명령을 처리합니다.</p>\n<p>복수의 명령어( <strong>semi-colon</strong>으로 구분된)도 <strong>병렬적으로</strong> 처리가 가능합니다. (출력 순서는 섞일수 있습니다.)</p>\n<p><code class=\"language-text\">> ls -al;pwd;ifconfig</code>\n<img src=\"/uploads/16fa5e8dfc47a510db68e20de40b7e46/image.png\" alt=\"image\"></p>\n<p>quit command 입력시 쉘을 종료합니다.</p>\n<p><code class=\"language-text\">> quit</code>\n<img src=\"/uploads/99751011f8999be44faf76182684eca5/image.png\" alt=\"image\"></p>\n<h3 id=\"에러-처리\" style=\"position:relative;\"><a href=\"#%EC%97%90%EB%9F%AC-%EC%B2%98%EB%A6%AC\" aria-label=\"에러 처리 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>에러 처리:</h3>\n<p><strong>존재하지 않는 명령어</strong>를 입력시 유저에게 알려줍니다.</p>\n<p><code class=\"language-text\">> thisisnotvalid</code>\n<img src=\"/uploads/5c087bc7767963eedaf0f243ab2badd5/image.png\" alt=\"image\"></p>\n<p><strong>아무 입력을 하지 않고 엔터를 입력할 경우</strong> 다시 입력하도록 유도합니다.\n<img src=\"/uploads/3946ad6c8b760ca2ec459ef5e3d3218d/image.png\" alt=\"image\"></p>\n<p><strong>아무 입력을 하지 않은 상태에서 ctrl-D를 입력할 경우</strong> shell은 종료됩니다.\n<img src=\"/uploads/ab43e066649b669847a2ba847d9d5bc5/image.png\" alt=\"image\"></p>\n<h3 id=\"실행-전제-\" style=\"position:relative;\"><a href=\"#%EC%8B%A4%ED%96%89-%EC%A0%84%EC%A0%9C-\" aria-label=\"실행 전제  permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>실행 전제 :</h3>\n<ol>\n<li><strong>입력의 길이는 최대 1000자</strong>입니다.</li>\n<li><strong>입력받는 명령어는 최대 50개</strong>입니다.</li>\n<li><strong>명령어당 옵션의 개수(space로 구분하는 ex) -a -l -v -> 3개)는 최대 10개</strong>입니다.</li>\n</ol>\n<hr>\n<h3 id=\"작동과정-설명--1\" style=\"position:relative;\"><a href=\"#%EC%9E%91%EB%8F%99%EA%B3%BC%EC%A0%95-%EC%84%A4%EB%AA%85--1\" aria-label=\"작동과정 설명  1 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>작동과정 설명 :</h3>\n<h2 id=\"batch-mode\" style=\"position:relative;\"><a href=\"#batch-mode\" aria-label=\"batch mode permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Batch mode</h2>\n<p>두번째로 <strong>batch mode</strong>에 대한 설명과 예시입니다.\n유저가 main 함수의 인자로 넘긴 batch_file을 읽어오고</p>\n<p>명령어를 분할하고 처리하는 과정은 <strong>interactvie mode</strong>와 동일합니다.</p>\n<ol>\n<li>fgets() 함수를 통해 사용자가 실행될때 첨부한 batch_file을 한줄단위로 읽어옵니다.</li>\n<li>마지막줄을 읽었다면 중지합니다.</li>\n<li>만약 명령어가 없고 개행문자만 있는 빈 줄(\\n)을 읽었다면 다음 라인을 읽기 위해 1번으로 돌아갑니다.</li>\n<li>strtok 함수를 사용하여 semi-colon과 space를 기준으로 raw한 입력을 유의미하게 분할합니다.</li>\n<li>분할된 명령어들은 char* 이차원 배열에 저장됩니다.</li>\n<li>명령의 개수만큼 fork 함수를 통해 자식프로세스를 생성합니다.</li>\n<li>자식프로세스안에서 execvp 함수를 통해 저장된 명령어를 처리합니다.</li>\n<li>부모 프로세스에서는 모든 자식프로세스가 끝나기를 기다린후, 모두 종료되면 다음 라인을 읽기 위해 1번으로 돌아갑니다.</li>\n</ol>\n<p>만약 이 과정에서 에러가 검출된다면 유저에게 알려줍니다.</p>\n<hr>\n<h3 id=\"작동예시\" style=\"position:relative;\"><a href=\"#%EC%9E%91%EB%8F%99%EC%98%88%EC%8B%9C\" aria-label=\"작동예시 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>작동예시:</h3>\n<p><code class=\"language-text\">./shell [batch_file]</code> 형식으로 <strong>batch mode</strong>를 사용합니다.</p>\n<p><code class=\"language-text\"> vim test.txt</code>\n<img src=\"/uploads/0e1f3919cbe66a86178b4d79f96110fc/image.png\" alt=\"image\"></p>\n<p><img src=\"/uploads/ca1a0a07e5a35dd8309495002207d4b1/image.png\" alt=\"image\"></p>\n<h3 id=\"에러-처리-1\" style=\"position:relative;\"><a href=\"#%EC%97%90%EB%9F%AC-%EC%B2%98%EB%A6%AC-1\" aria-label=\"에러 처리 1 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>에러 처리:</h3>\n<p><strong>존재하지 않는 명령어</strong>를 입력시 유저에게 알려줍니다.</p>\n<p><code class=\"language-text\">> vim test.txt</code>\n<img src=\"/uploads/3fd2270ef36cb0e1e003e09ab25b5ae2/image.png\" alt=\"image\">\n<img src=\"/uploads/64792fe0a9f0a2d457e6a57dc6b2b849/image.png\" alt=\"image\"></p>\n<p><strong>사용자가 두개의 batch file을 인자로 넣을시</strong> 유저에게 경고를 보여주고 shell을 종료합니다.\n<img src=\"/uploads/9c0371a16a20a5df892100ccaab22dec/image.png\" alt=\"image\"></p>\n<h3 id=\"실행-전제--1\" style=\"position:relative;\"><a href=\"#%EC%8B%A4%ED%96%89-%EC%A0%84%EC%A0%9C--1\" aria-label=\"실행 전제  1 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>실행 전제 :</h3>\n<ol>\n<li><strong>입력의 길이는 최대 1000자</strong>입니다.</li>\n<li><strong>입력받는 명령어는 최대 50개</strong>입니다.</li>\n<li><strong>명령어당 옵션의 개수(space로 구분하는 ex) -a -l -v -> 3개)는 최대 10개</strong>입니다.</li>\n</ol>\n<hr>\n<h3 id=\"기타-에러-처리-사항\" style=\"position:relative;\"><a href=\"#%EA%B8%B0%ED%83%80-%EC%97%90%EB%9F%AC-%EC%B2%98%EB%A6%AC-%EC%82%AC%ED%95%AD\" aria-label=\"기타 에러 처리 사항 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>기타 에러 처리 사항:</h3>\n<ol>\n<li>fork가 실패했을시 메모리에 심각한 문제가 있다고 판단하여 shell 을 종료합니다.</li>\n<li>batch file을 fopen을 사용했을대 NULL이 반환될시 비정상적 작동을 막기 위해 shell을 종료합니다.</li>\n<li>batch file을 두개 이상 사용시 (ex. ./shell batch_file batch_file 유저에게 경고를 보여준후 shell을 종료합니다.</li>\n<li>명령어를 분할하는 단계에서 \\n 개행문자를 삭제합니다. 개행문자가 삭제되지 않고 execvp의 인자로 입력될시 illegal option 에러를 표출하기 때문입니다.</li>\n</ol>\n<h3 id=\"코드\" style=\"position:relative;\"><a href=\"#%EC%BD%94%EB%93%9C\" aria-label=\"코드 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>코드</h3>\n<p><a href=\"https://github.com/BecomeWeasel/Operating-System-xv6\">Operating-System-xv6</a></p>\n<div class=\"table-of-contents\">\n<ul>\n<li>\n<p><a href=\"#%EC%9A%B4%EC%98%81%EC%B2%B4%EC%A0%9C-%EA%B3%BC%EC%A0%9C-1--simple-user-level-unix-shell\">운영체제 과제 1 ( Simple User-level Unix Shell)</a></p>\n<ul>\n<li><a href=\"#%ED%85%8C%EC%8A%A4%ED%8A%B8-%ED%99%98%EA%B2%BD-\">테스트 환경 :</a></li>\n<li><a href=\"#%EA%B0%9C%EC%9A%94-\">개요 :</a></li>\n<li><a href=\"#%EC%9E%91%EB%8F%99%EA%B3%BC%EC%A0%95-%EC%84%A4%EB%AA%85-\">작동과정 설명 :</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#interactvie-mode\">Interactvie Mode</a></p>\n<ul>\n<li><a href=\"#%EC%9E%91%EB%8F%99%EC%98%88%EC%8B%9C-\">작동예시 :</a></li>\n<li><a href=\"#%EC%97%90%EB%9F%AC-%EC%B2%98%EB%A6%AC\">에러 처리:</a></li>\n<li><a href=\"#%EC%8B%A4%ED%96%89-%EC%A0%84%EC%A0%9C-\">실행 전제 :</a></li>\n<li><a href=\"#%EC%9E%91%EB%8F%99%EA%B3%BC%EC%A0%95-%EC%84%A4%EB%AA%85--1\">작동과정 설명 :</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#batch-mode\">Batch mode</a></p>\n<ul>\n<li><a href=\"#%EC%9E%91%EB%8F%99%EC%98%88%EC%8B%9C\">작동예시:</a></li>\n<li><a href=\"#%EC%97%90%EB%9F%AC-%EC%B2%98%EB%A6%AC-1\">에러 처리:</a></li>\n<li><a href=\"#%EC%8B%A4%ED%96%89-%EC%A0%84%EC%A0%9C--1\">실행 전제 :</a></li>\n<li><a href=\"#%EA%B8%B0%ED%83%80-%EC%97%90%EB%9F%AC-%EC%B2%98%EB%A6%AC-%EC%82%AC%ED%95%AD\">기타 에러 처리 사항:</a></li>\n<li><a href=\"#%EC%BD%94%EB%93%9C\">코드</a></li>\n</ul>\n</li>\n</ul>\n</div>","excerpt":"운영체제 과제 1 ( Simple User-level Unix Shell) 테스트 환경 : OS : Ubuntu 16.04 gcc : gcc 5.4.0 개요 : 운영체제 첫번째 과제인 Simple User-level Unix shell에 대한 내용입니다. 크게 interactvie mode와 batch mode로 나뉘어지고\n사용자가 입력한 명령 혹은 batch file을 읽어와서 명령을 수행하고 그 결과를 출력하는 프로그램입니다. 작동과정 설명 : Interactvie Mode 첫번째로 interactvie mode내에서의 작동 과정과 예시입니다.\n크게 사용자로부터 입력을 받아오고, 입력을 특정한 기준을 가지고 분할하여\nexecvp 함수를 사용하여 처리합니다. fgets() 함수를 통해 사용자에게 입력을 받습니다. strtok 함수를 사용하여 semi-colon과 space를 기준으로 raw한 입력을 유의미하게 분할합니다. 분할된 명령어들은 char* 이차원 배열에 저장됩니다. 명…","frontmatter":{"date":"March 28, 2019","title":"운영체제 과제 1 (Simple User-level Unix Shell)","categories":"운영체제","author":"weasel","emoji":"💻"},"fields":{"slug":"/os-user-level-unix-shell/"}},"next":null,"prev":{"id":"6b3dc350-65b2-5e76-bbc1-dbd475110e49","html":"<h2 id=\"운영체제-과제-2implementing-simple-schedulers-on-xv6\" style=\"position:relative;\"><a href=\"#%EC%9A%B4%EC%98%81%EC%B2%B4%EC%A0%9C-%EA%B3%BC%EC%A0%9C-2implementing-simple-schedulers-on-xv6\" aria-label=\"운영체제 과제 2implementing simple schedulers on xv6 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>운영체제 과제 2(implementing simple schedulers on xv6)</h2>\n<hr>\n<h3 id=\"테스트-환경\" style=\"position:relative;\"><a href=\"#%ED%85%8C%EC%8A%A4%ED%8A%B8-%ED%99%98%EA%B2%BD\" aria-label=\"테스트 환경 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>테스트 환경</h3>\n<ul>\n<li>OS : Ubuntu 16.04</li>\n<li>gcc : gcc 5.4.0</li>\n</ul>\n<h3 id=\"개요\" style=\"position:relative;\"><a href=\"#%EA%B0%9C%EC%9A%94\" aria-label=\"개요 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>개요</h3>\n<p>운영체제 두번째 과제인 <strong>Implementing simple schedulers (FCFS,MLFQ)</strong> 에 대한 내용입니다.</p>\n<p>크게 <strong>FCFS</strong> 정책과 <strong>MLFQ</strong> 정책을 사용하게끔 분기됩니다.</p>\n<hr>\n<h2 id=\"fcfs\" style=\"position:relative;\"><a href=\"#fcfs\" aria-label=\"fcfs permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>FCFS</h2>\n<h3 id=\"과제-명세-\" style=\"position:relative;\"><a href=\"#%EA%B3%BC%EC%A0%9C-%EB%AA%85%EC%84%B8-\" aria-label=\"과제 명세  permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>과제 명세 :</h3>\n<p>먼저 <strong>FCFS</strong> 스케쥴링의 명세는 다음과 같습니다.\n<img src=\"/uploads/9376767e42f0679e907b477b13881137/image.png\" alt=\"image\"></p>\n<ol>\n<li>먼저 생성(fork())된 프로세스가 먼저 스케줄링 되어야 한다.</li>\n<li>스케줄링된 프로세스는 종료되기 전까지는 swithc-out 되지 않는다.</li>\n<li>프로세스가 스케쥴링 된 이후 100ticks이 지날때까지 종료되거나 sleeping 하지 않으면 종료해야한다.</li>\n<li>실행중인 프로세스가 sleeping으로 전환되면 다음 프로세스가 스케줄링된다.</li>\n<li>sleeping 상태이면서 먼저 생성된 P가 깨어나면 그 프로세스로 스케줄링 된다.</li>\n</ol>\n<h3 id=\"작동과정-설명-\" style=\"position:relative;\"><a href=\"#%EC%9E%91%EB%8F%99%EA%B3%BC%EC%A0%95-%EC%84%A4%EB%AA%85-\" aria-label=\"작동과정 설명  permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>작동과정 설명 :</h3>\n<p>첫번째로 <strong>FCFS</strong> 스케쥴링 정책 내에서의 작동 과정,설정값들과 예시입니다.</p>\n<p>먼저, <strong>ptable</strong>에는 <strong>pid</strong> 순서대로(<strong>만들어진 순서대로</strong>) 삽입되어 있습니다.\n<img src=\"/uploads/884497de7c33bd122c0b64d26c90f137/image.png\" alt=\"image\"></p>\n<p>그렇기 때문에 <strong>ptable</strong>에서 ptable.proc[0,1,2,3…]이렇게 접근을 한다면 생성된 프로세스에 접근을 할 수 있습니다.</p>\n<p>또, <strong>pid</strong> 순서대로 들어있기 때문에 별도의 큰 조작 없이도 <strong>First Come First Served</strong>의 스케쥴링이 수행가능합니다. (1번 명세)</p>\n<p>하지만 기존의 정의되어 있는 <strong>struct proc</strong>에는 이 Process가 얼마만큼의 시간동안 수행되었는지에 대한 정보를 담고있지 않기 때문에\n<img src=\"/uploads/5b2ccefaaed7ef774667e8c12e06c734/image.png\" alt=\"image\">\n위와 같이 <strong>uint ctime</strong>과 <strong>uint stime</strong>을 추가해줍니다.\n<strong>ctime</strong>의 역할은 프로세스가 생성된 시간을 의미하고,</p>\n<p><em>(사실 pid가 이 역할을 대체할 수 있고 더 정확합니다.)</em></p>\n<p><strong>stime</strong>은 스케쥴러에 의해 이 Process가 선택된 시간(<strong>ticks</strong>)을 의미합니다.\n<img src=\"/uploads/00a6b066762c33ded7fa12b22e20e920/image.png\" alt=\"image\">\n위의 사진처럼 <strong>FCFS</strong> 알고리즘에 의해서 선택되었을때 , <strong>stime</strong>을 현재의 <strong>ticks</strong>로 설정해줍니다.</p>\n<p><strong>FCFS</strong> 알고리즘의 역할은 <strong>가장 이전에 생성된,다시 말해서 pid가 가장 작고 현재 수행가능한 상태(RUNNABLE)</strong> 인</p>\n<p>Process를 고르는 것입니다..</p>\n<p>그렇기 때문에  아래와 같은 code block으로 조건을 만족하는 적합한 Process를 선택합니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">for(p=ptable.proc;p&lt;&amp;ptable.proc[NPROC];p++){  // ptable.proc을 앞에서부터 순차적으로 탐색함, NPROC까지 탐색함\nif(p->state!=RUNNABLE)\n     continue;\nelse{\n     p->stime=ticks;\n     ...\n     p->state=RUNNING\n    ...\n     swtch(&amp;(c->scheduelr),p->context);\n    ...\n}</code></pre></div>\n<p>SLPEEING이 끝나고 wake 하게 될때도 <strong>ptable</strong> 을 순차적으로  앞에서부터 탐색하기 때문에\n<strong>pid가 낮은,먼저 생성된</strong> Process를 처리할 수 있습니다.</p>\n<p>또, <strong>실행된지 100ticks</strong>가 넘어갔을때 종료하는 조건은 trap.c 내에\n<img src=\"/uploads/b63c63d6710bfafd031e6c31ebfb46cf/image.png\" alt=\"image\">\n로 구성되어 있습니다. <strong>현재 tick</strong>에서 <strong>stime</strong> 을 뺀 결과가 100보다 크거나 같다는 뜻은,</p>\n<p>이 Process가 100tick이상 run되었다는 뜻입니다.<em><strong>(항상 스케쥴될때 stime=0으로 현재 ticks으로 초기화)</strong></em></p>\n<p>그렇기 때문에 이 Process의 killed을 1로 바꿔주고, 이렇게 되면 다음 timer때 이 프로세스는 죽습니다.</p>\n<hr>\n<h3 id=\"fcfs-test--결과와-간단한-설명\" style=\"position:relative;\"><a href=\"#fcfs-test--%EA%B2%B0%EA%B3%BC%EC%99%80-%EA%B0%84%EB%8B%A8%ED%95%9C-%EC%84%A4%EB%AA%85\" aria-label=\"fcfs test  결과와 간단한 설명 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>FCFS Test  결과와 간단한 설명</h3>\n<p><strong>조건 : NUM_CHILD를 5에서 7로 수정,</strong></p>\n<p>첫번째 테스트 <strong>(sleep이나 yield를 하지 않고)</strong>\n<img src=\"/uploads/26c4e44ff3c7c9e1032ab8f0c319c246/image.png\" alt=\"image\">\n예상대로, sleep,yield 아무것도 하지 않았으니 먼저 생성되는 P5부터 P11까지 출력을 순차적으로 진행합니다.</p>\n<p>두번째 테스트 <strong>(yield를 할때)</strong>\n<img src=\"/uploads/d320b1efb3467ccd89b3cb52d1574e49/image.png\" alt=\"image\">\n예상대로, yeild를 하더라도 먼저 생성된 프로세스에게 우선권이 있으므로 다시 CPU 사용권한이 돌아와 진행합니다.</p>\n<p>세번째 테스트 <strong>(sleep)</strong> 을 할때\n<img src=\"/uploads/a91f11df912e082c6ac0713405d9217f/image.png\" alt=\"image\">\nsleep을 하면 순차적으로 진행되는것처럼 보이지만 ,\n…P25->P19->P20->P21->P22->P23->P24-><strong>P19</strong> 이부분에서</p>\n<p>P24의 다음으로 P25가 스케쥴링되는것이 아니라 wakeup한 P19가 선택되어 진행됩니다.</p>\n<p>이러한 현상은 꾸준히 관찰할수 있습니다만, 테스팅되는 하드웨어에 따라 상황이 달라짐을 확인했습니다.</p>\n<p>네번째 테스트 <strong>100tick을 초과했을때</strong>\n<img src=\"/uploads/0e06336891b53083ccef92a099c4b318/image.png\" alt=\"image\">\n예상대로 , <strong>pid</strong>가 가장 작은 프로세스가 실행되다가 100tick이 지나면 강제종료되고,</p>\n<p>다음 프로세스가 스케줄링됨을 확인할수 있습니다. 또 모든 자식 프로세스가 강제 종료되면 OK메세지를 확인가능합니다.</p>\n<hr>\n<h3 id=\"트러블슈팅\" style=\"position:relative;\"><a href=\"#%ED%8A%B8%EB%9F%AC%EB%B8%94%EC%8A%88%ED%8C%85\" aria-label=\"트러블슈팅 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>트러블슈팅</h3>\n<p><strong>FCFS</strong>는 비교적 간단한 구현이어서 <strong>FCFS</strong> 그 자체는 크게 어렵지는 않았습니다.\n다만 xv6의 내부적인 기능을 처음 구현하다보니 sched 함수나 scheduler 함수와 같은 중추적인 함수들을 분석하는데 시간을 쏟았습니다.</p>\n<p>또 trap.c 함수 내에서의 trap 함수가 어떻게 사용되는지 분석하는데 시간을 투자했습니다..</p>\n<hr>\n<h2 id=\"mlfq-multi-level-feedback-queue\" style=\"position:relative;\"><a href=\"#mlfq-multi-level-feedback-queue\" aria-label=\"mlfq multi level feedback queue permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>MLFQ (Multi Level Feedback Queue)</h2>\n<h3 id=\"과제-명세--1\" style=\"position:relative;\"><a href=\"#%EA%B3%BC%EC%A0%9C-%EB%AA%85%EC%84%B8--1\" aria-label=\"과제 명세  1 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>과제 명세 :</h3>\n<p>먼저 <strong>MLFQ</strong> 스케쥴링의 명세는 다음과 같습니다.\n<img src=\"/uploads/5fe7300fb417744603dc91b4369ece6b/image.png\" alt=\"image\">\n<img src=\"/uploads/20b2cad85cfe658d7fad59fc4b8a77c3/image.png\" alt=\"image\"></p>\n<h3 id=\"작동-과정-설명\" style=\"position:relative;\"><a href=\"#%EC%9E%91%EB%8F%99-%EA%B3%BC%EC%A0%95-%EC%84%A4%EB%AA%85\" aria-label=\"작동 과정 설명 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>작동 과정 설명:</h3>\n<p><strong>MLFQ</strong> 구현의 가장 중요한 점은 <strong>L0 큐</strong>와 <strong>L1 큐</strong> 각각의 스케쥴링 알고리즘이 같은 부분이 존재하지만 몇가지 점이 다르다는 것입니다.</p>\n<p><strong>L0 큐</strong>는 기본적으로 <strong>Round robin(Q=4ticks)</strong> 이고, <strong>L1 큐</strong> 는 <strong>Round robin(Q=8tciks)</strong> 에 <strong>priority</strong> 가 고려대상이라는 것입니다.</p>\n<p>먼저 <strong>ptable</strong>의 구조는 이전과 동일합니다. 차이점은 proc.h에 정의되어 있는 proc 구조체입니다.\n<img src=\"/uploads/e26551eaee0e952c883a23d9e95cb2d5/image.png\" alt=\"image\">\n속해있는 Q level 을 드러내는 <strong>int lev</strong>, 우선순위를 나타내는 <strong>int priority</strong>, 작동한 시간을 의미하는 <strong>int rtime</strong> (0부터 시작),</p>\n<p>이 Process가 CPU를 독점하는지 체크하는 <strong>int monopolize</strong> ( 1은 독점중,0은 독점중이 아님)등이 추가되었습니다.</p>\n<p>먼저 proc.c 안에 정의된 <strong>allocproc</strong> 함수에서\n<img src=\"/uploads/e69b06dc23d124a6b17d9a54b36b2d2a/image.png\" alt=\"image\">\n와 같은 코드로, 초기에 <strong>priority</strong>를 0으로, 초기 <strong>lev</strong>을 0으로, <strong>monopolize</strong> 값을 0으로 초기화해줍니다.</p>\n<p>이를 통해 처음 실행되는 프로세스의 우선순위를 0으로 , 그리고 가장 높은 레벨의 큐(L0)로 삽입됩니다.</p>\n<p>그 다음으로 스케쥴링을 담당하는 <strong>scheduler</strong> 함수입니다.</p>\n<p>첫번째 사진은 <strong>RUNNABLE</strong> 한 프로세스 중 <strong>L0큐</strong> 에 속해있는 프로세스의 존재를 측정하고,</p>\n<p>있다면 <strong>L0큐</strong>를 탐색하여 적절한 Process를 찾는 부분입니다.\n<img src=\"/uploads/eab780101427383ea1576f1450658d60/%E1%84%89%E1%85%B3%E1%84%8F%E1%85%B3%E1%84%85%E1%85%B5%E1%86%AB%E1%84%89%E1%85%A3%E1%86%BA_2019-04-28_21.05.37\" alt=\"image\">\n먼저 <strong>L0 큐</strong> 내에 존재하는한 <strong>적절한</strong> 프로세스의 개수를 다음과 같이 찾을수 있습니다.</p>\n<ol>\n<li>프로세스가 <strong>구동가능한 상태인가?</strong> <em><strong>(RUNNABLE)</strong></em></li>\n<li>프로세스의 <strong>큐 레벨이 0</strong>인가?</li>\n</ol>\n<p>위 두가지 조건을 모두 만족해야 <strong>적절한 프로세스</strong>라고 할수 있습니다.\n적절한 프로세스를 찾았다면, <strong>rtime</strong>을 0으로 초기화해주고 <strong>context swithcing</strong>이 일어납니다.</p>\n<p>두번째 사진은 <strong>L0 큐</strong>에 적절한 Process가 없을때 <strong>L1 큐</strong>를 탐색하고 가장 높은 Priority 를 가지는 Process를 선택하는 부분입니다.\n<img src=\"/uploads/468737b0055f688578e7701ea0d42f92/image.png\" alt=\"image\">\n프로세스를 <strong>순차적으로 돌면서</strong> <strong>L1 큐</strong>에 있는 것중에서 <strong>Priority가 가장 높은 프로세스를 선택</strong>합니다.\n그 후 그 프로세스로 <strong>context swithcing</strong>이 일어납니다.\npriority 우선순위가 같다면 , ptable을  시작에서부터 순차적으로 탐색하기때문에 <strong>FCFS</strong>로 행동합니다.</p>\n<hr>\n<h4 id=\"mlfq-구조는-trapc가-중요합니다\" style=\"position:relative;\"><a href=\"#mlfq-%EA%B5%AC%EC%A1%B0%EB%8A%94-trapc%EA%B0%80-%EC%A4%91%EC%9A%94%ED%95%A9%EB%8B%88%EB%8B%A4\" aria-label=\"mlfq 구조는 trapc가 중요합니다 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><strong>MLFQ</strong> 구조는 trap.c가 중요합니다.</h4>\n<p>trap.c에서 MLFQ와 관련해서 동작하는 것은 크게</p>\n<ol>\n<li>지금 현재 프로세스의 <strong>rtime</strong> 을 증가시키는것.</li>\n<li>지금 현재 구동중인 프로세스가 <strong>L0큐</strong>인데,<strong>rtime</strong>이 <strong>4 tick</strong> 이상이고, <strong>독점적</strong>이지 않을때 L1 큐로 강등하고 <strong>yield()</strong> 를 수행함.</li>\n<li>지금 현재 구동중인 프로세스가 <strong>L1큐</strong>인데,<strong>rtime</strong>이 <strong>8 tick</strong> 이상이고, <strong>독점적</strong>이지 않을때 <strong>priority</strong>가 0보다 크다면 1만큼 감소시키고,</li>\n</ol>\n<p><strong>yield()</strong> 을 수행.\n4. <em><strong>Starvation</strong></em>을 방지하기 위해  <strong>100 tick</strong> 마다  <strong>Priority boosting</strong>을 수행.</p>\n<p>하는 4가지로 구분 될 수 있습니다.</p>\n<p>단계별로 설명하겠습니다.</p>\n<ol>\n<li>지금 현재 프로세스의 <strong>rtime</strong>을 증가시키는것. 입니다.</li>\n</ol>\n<p><img src=\"/uploads/3932951b472e1206a7614f0b1784b069/image.png\" alt=\"image\">\n위와 같은 코드로 수행됩니다.</p>\n<p>주요 원리는 <em>TIMER interrupt는 매 tick 마다 발생</em>되므로, 그에 맞춰서 현재 구동중인 프로세스 정보를 얻어오고 그 프로세스의 <strong>rtime</strong>을 1만큼 증가시킵니다.</p>\n<ol start=\"2\">\n<li>지금 현재 구동중인 프로세스가 <strong>L0큐</strong>인데,<strong>rtime</strong>이 <strong>4 tick</strong> 이상이고, <strong>독점적</strong>이지 않을때 L1 큐로 강등하고 <strong>yield()</strong> 수행함.</li>\n</ol>\n<p><img src=\"/uploads/769d847ec85571e2656c894e7918c234/image.png\" alt=\"image\">\n위와 같은 코드로 수행됩니다.</p>\n<p>현재 레벨이 0이고, 실행된 <strong>rtime</strong>이 4tick상이고, 독점적이지 않는다면 <strong>yield()</strong> 를 호출하고 L1 큐로 강등시킵니다. <strong>yield</strong> 함수는 sched 함수를 호출하고 sched에서 scheduler가 호출되니 다음 프로세스를 스케쥴링합니다.</p>\n<ol start=\"3\">\n<li>지금 현재 구동중인 프로세스가 <strong>L1큐</strong>인데,<strong>rtime</strong>이 <strong>8 tick</strong> 이상이고, <strong>독점적</strong>이지 않을때 <strong>priority</strong>가 0보다 크다면 1만큼 감소시키고, <strong>yield()</strong> 을 수행.</li>\n</ol>\n<p><img src=\"/uploads/7b6991f3dc1d0b3abda372421e79dc34/image.png\" alt=\"image\">\n위와 같은 코드로 수행됩니다.</p>\n<p>전체적으로 두번째 L0 와 비슷하지만, priority가 0보다 크다면 1만큼 감소시키는것이 다릅니다.\n감소를 하거나 하지 않은 두가지 경우 모두에서  <strong>yield</strong>를 호출 하기 때문에 <strong>yield</strong> 함수는 sched 함수를 호출하고 sched에서 scheduler가 호출되니 다음 프로세스를 스케쥴링합니다.</p>\n<ol start=\"4\">\n<li><em><strong>Starvation</strong></em>을 방지하기 위해  <strong>100 tick</strong> 마다  <strong>Priority boosting</strong>을 수행.</li>\n</ol>\n<p><em>trap.c</em>\n<img src=\"/uploads/577c507e9e7d029a43c3eb3622b1034a/image.png\" alt=\"image\">\n<em>proc.c</em>\n<img src=\"/uploads/1541e962398dd8e7549459f4c58bbc19/image.png\" alt=\"image\"></p>\n<p>위와 같이 trap.c에서 proc.c에 정의된 priboosting 함수를 호출합니다.\npriboosting 함수는 아래에서 설명하겠지만, L1에 있는 모든 프로세스들을 L0큐로 올리고, priority를 0으로 초기화합니다.</p>\n<hr>\n<h3 id=\"mlfq-test-결과와-간단한-설명\" style=\"position:relative;\"><a href=\"#mlfq-test-%EA%B2%B0%EA%B3%BC%EC%99%80-%EA%B0%84%EB%8B%A8%ED%95%9C-%EC%84%A4%EB%AA%85\" aria-label=\"mlfq test 결과와 간단한 설명 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>MLFQ Test 결과와 간단한 설명</h3>\n<p><strong>조건 :</strong></p>\n<ol>\n<li>NUM_LOOP2를 <strong>300000(30만)</strong> 으로 수정</li>\n<li>NUM_LOOP3를 <strong>200000(20만)</strong> 으로 수정</li>\n<li>NUM_LOOP4를 <strong>500000(50만)</strong> 으로 수정</li>\n</ol>\n<blockquote>\n<p>테스트 조건을 수정한 이유는 뚜렷한 경향성을 파악하기 위해서 <strong>충분한 Iteration</strong>을 확보하기 위함입니다.</p>\n</blockquote>\n<p>첫번째 테스트 (<strong>priority를 변경하면서</strong>)\n<img src=\"/uploads/a820a54d8856832d54b9073e4fe7e338/image.png\" alt=\"image\">\n예상대로 pid 값이 더 큰 프로세스의 <strong>priority</strong>가 더 높게 설정되기 때문에, pid 값이 더 큰 프로세스가 먼저 끝나게 되고,</p>\n<p><strong>pid값이 작은 프로세스</strong> ( 사진에서 <strong>5번 프로세스 혹은 4번</strong>)가 L0에서 실행되는 시간이 긴 경향을 보입니다.</p>\n<p>두번째 테스트(<strong>priority 변경 없이</strong>)\n<img src=\"/uploads/9db208a88092082689440178e011b91b/image.png\" alt=\"image\">\n예상대로 pid 값이 작은 프로세스가 <strong>L1의 비율이 높습니다.</strong></p>\n<p>이는 , L1 큐에서는 같은 <strong>priority</strong> 를 가지는 프로세스라면 <strong>FCFS</strong>로 동작하기 때문입니다..</p>\n<p>세번째 테스트 (<strong>yield</strong>)\n<img src=\"/uploads/662f69b215d9ad034c8f2b39111e4576/image.png\" alt=\"image\">\n왠만하면 L0의 <strong>4 tick quantum</strong>을 다 사용하지 않기 때문에 시간 사용량이 초기화되니,</p>\n<p>계속 L0에 남아있게 됩니다. L0는 <strong>Round robin</strong>이기 때문에 거의 동시에 작업이 완료됩니다.</p>\n<p>네번째 테스트 (<strong>monopolize</strong>)\n<img src=\"/uploads/d5258221ee29a8b7492cb6cbadb36102/image.png\" alt=\"image\">\n<strong>monopolize</strong>라는 시스템콜을 사용한 테스트입니다.</p>\n<p>가장 큰 PID를 가진 프로세스가 CPU 독점을 요청하기 때문에 가장 큰 pid인</p>\n<p>Process 45가 CPU를 독점합니다. <strong>MLFQ</strong> 스케쥴링은 일어나지 않기 때문에\nL0의 에서 모든 작업을 완료합니다.</p>\n<p>다른 프로세스는 test2의 결과와 유사한것을 볼 수 있습니다.</p>\n<hr>\n<h4 id=\"트러블슈팅-1\" style=\"position:relative;\"><a href=\"#%ED%8A%B8%EB%9F%AC%EB%B8%94%EC%8A%88%ED%8C%85-1\" aria-label=\"트러블슈팅 1 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>트러블슈팅</h4>\n<p><strong>FCFS</strong> 와는 다르게 고려해야할 부분이 많았습니다.\n대표적으로 두가지 문제가 있었습니다.</p>\n<ol>\n<li>스케쥴링 함수를 구현할때 여러가지 조건문이 중첩됨.</li>\n<li>monopolizing의 구현</li>\n</ol>\n<p>다음과 같이 해결했습니다.</p>\n<ol>\n<li>중첩되는 모든 케이스를 명시하는것이 아니라 큰 틀에서 if문을 분기하여 처리함.</li>\n<li>현재 프로세스가 <strong>rtime</strong>을 넘겼을때 yield하는 부분에서 monopolize 체크를 위하여, proc 구조체에 플래그를 삽입함. 이를 통해 trap 함수에서 호출될때 혖현재 프로세스의 monopolize flag를 체크해서 독점적이지 않을때만 CPU 자원을 포기하도록 구현함.</li>\n</ol>\n<hr>\n<h3 id=\"시스템-콜\" style=\"position:relative;\"><a href=\"#%EC%8B%9C%EC%8A%A4%ED%85%9C-%EC%BD%9C\" aria-label=\"시스템 콜 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>시스템 콜</h3>\n<p>과제 수행을 위해 필요한 <strong>System call</strong>은 총 4개입니다.</p>\n<ol>\n<li>void yield(void)</li>\n<li>int getlev(void)</li>\n<li>void setprioirty(int pid,int priority)</li>\n<li>void monopolize(int password)</li>\n</ol>\n<p>각각의 시스템 콜 구현체를 먼저 보이고 , 공통적인 부분은 마지막에 첨부합니다</p>\n<p>첫번재로 <strong>void yield(void) 함수</strong>입니다.\n<img src=\"/uploads/cc7b7ebeee31147342bac4fc447c8399/image.png\" alt=\"image\">\nsys_yield 시스템콜은 proc.c에 정의되어 있는 yield 함수를 호출하는 것입니다. 현재 프로세스가 CPU 자원을 반납하는 행동입니다.</p>\n<p>두번째로 <strong>int getlev(void) 함수</strong>입니다. 현재 프로세스의 큐 레벨을 반환하는 것입니다.\n<img src=\"/uploads/22b75a619abe7c14e3ba7f90cac7eb76/image.png\" alt=\"image\">\n<img src=\"/uploads/9d611c6099bb9cb11315d2847e4e139e/image.png\" alt=\"image\">\ngetlev 시스템콜은 proc.c 에 정의 한 getlev 함수를 호출합니다.</p>\n<p>proc.c 에서 정의된 getlev 함수는\n현재 프로세스가 독점중인 상태라면 1을 반환하고,</p>\n<p>그렇지 않다면 현재 프로세스의 큐레벨인 <strong>lev</strong> 을 반환합니다. (<em>return myproc()->lev</em>);</p>\n<p>세번째로 <strong>void setpriority(int pid,int priority) 함수</strong>입니다.  인자로 받은 pid와 일치하는 프로세스의 priority를 인자 priority로 변경합니다.\n<img src=\"/uploads/23ba39493774781914d210c477d398c3/image.png\" alt=\"image\">\n<img src=\"/uploads/30588247bda82bef58c725830014381a/image.png\" alt=\"image\">\nsetpriority 시스템콜은 proc.c에 정의한 setprocpriority 함수를 호출합니다.</p>\n<p>proc.c에서 정의된 setprocpriority 함수는\n현재 <strong>ptable</strong>에서 <strong>인자 pid와 매칭되는 프로세스</strong>를 찾고, <strong>인자 priority로 프로세스의 priorirty를 변경</strong>합니다.<em>(targetP->priority=priority)</em></p>\n<p>시스템콜이기 때문에 argint를 이용하여 인자를 받습니다.</p>\n<p>마지막으로 <strong>void monopolize(int password) 함수</strong>입니다. 인자로 받은 password와 미리 설정한 본인의 학번과 비교한뒤 일치하면</p>\n<p>현재 프로세스를 <strong>CPU에  독점적인 권한</strong>을 가지게 변경합니다.\n<img src=\"/uploads/b888f030441243e189d3fb462ff06ebe/image.png\" alt=\"image\">\n<img src=\"/uploads/53169d6ca932811f0fa3c3a29cdfc509/image.png\" alt=\"image\">\nmonopolize 시스템콜은 proc.c에 정의한 monopolize 함수를 호출합니다.</p>\n<p>proc.c에 정의된 monopolize 함수는\n먼저 <strong>ptable</strong>의 <strong>lock을 acquire</strong>해주고</p>\n<p>현재 프로세스의 <strong>monopolize</strong>가 1이라면,<strong>독점적이라면</strong>, 인자 password를 학번 2016026599와 체크한후, <strong>일치</strong>하면</p>\n<p><strong>monopolize</strong>를 0으로 바꾸어 독점해제하고, 현재 프로세스를 L0으로 이동시키고 <strong>priority</strong>를 0으로 변경합니다.</p>\n<p><strong>일치하지 않으면</strong> 독점을 해제하고, 현재 프로세스를 kill 합니다.<em>(kill 함수의 행동과 유사하게 행동합니다)</em></p>\n<p><strong>그 후 “wrong password at calling monopolize”라고 유저에게 안내합니다.</strong></p>\n<p>현재 프로세스의 <strong>monopolize</strong>가 0이라면,<strong>독점적이 아니라면,</strong> 인자 password를 학번 2016026599와 체크한후, <strong>일치</strong>하면</p>\n<p><strong>monopolize</strong>를 1으로 바꾸어 독점을 시작하고, 현재 프로세스를 L0으로 이동시키고 <strong>priority</strong>를 0으로 변경합니다.</p>\n<p><strong>일치하지 않으면</strong> 현재 프로세스를 kill 합니다.<em>(kill 함수의 행동과 유사하게 행동합니다)</em>.</p>\n<p><strong>그 후 “wrong password at calling monopolize”라고 유저에게 안내합니다.</strong></p>\n<p>그 후 <strong>ptable</strong>의 <strong>lock을 release</strong> 해줍니다.</p>\n<hr>\n<h3 id=\"시스템-콜-공통-사항\" style=\"position:relative;\"><a href=\"#%EC%8B%9C%EC%8A%A4%ED%85%9C-%EC%BD%9C-%EA%B3%B5%ED%86%B5-%EC%82%AC%ED%95%AD\" aria-label=\"시스템 콜 공통 사항 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>시스템 콜 공통 사항</h3>\n<h4 id=\"usyss\" style=\"position:relative;\"><a href=\"#usyss\" aria-label=\"usyss permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>usys.S</h4>\n<p><img src=\"/uploads/92b6a5016c03db42c037c7af1b0b01c2/image.png\" alt=\"image\"></p>\n<h4 id=\"userh\" style=\"position:relative;\"><a href=\"#userh\" aria-label=\"userh permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>user.h</h4>\n<p><img src=\"/uploads/a30f9ec5bd91af092732925684dd4c30/image.png\" alt=\"image\"></p>\n<h4 id=\"syscallh\" style=\"position:relative;\"><a href=\"#syscallh\" aria-label=\"syscallh permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>syscall.h</h4>\n<p><img src=\"/uploads/781e6ec5276140a7c0d8148512e1c1e5/image.png\" alt=\"image\"></p>\n<h4 id=\"syscallc\" style=\"position:relative;\"><a href=\"#syscallc\" aria-label=\"syscallc permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>syscall.c</h4>\n<p><img src=\"/uploads/0ff0ba599a1337b0f08954261557bb37/image.png\" alt=\"image\">\n<img src=\"/uploads/23234e5587b29c7964f8881930350352/image.png\" alt=\"image\"></p>\n<h4 id=\"makefile-시스템-콜-부분\" style=\"position:relative;\"><a href=\"#makefile-%EC%8B%9C%EC%8A%A4%ED%85%9C-%EC%BD%9C-%EB%B6%80%EB%B6%84\" aria-label=\"makefile 시스템 콜 부분 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Makefile 시스템 콜 부분</h4>\n<p><img src=\"/uploads/9c393b59729571c56f4dc0d1a9ba272c/image.png\" alt=\"image\"></p>\n<h4 id=\"makefile-코드-분기를-위해서-삽입한-부분\" style=\"position:relative;\"><a href=\"#makefile-%EC%BD%94%EB%93%9C-%EB%B6%84%EA%B8%B0%EB%A5%BC-%EC%9C%84%ED%95%B4%EC%84%9C-%EC%82%BD%EC%9E%85%ED%95%9C-%EB%B6%80%EB%B6%84\" aria-label=\"makefile 코드 분기를 위해서 삽입한 부분 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Makefile 코드 분기를 위해서 삽입한 부분</h4>\n<p><img src=\"/uploads/daad526d1a17caec51e6678a7702cfe9/image.png\" alt=\"image\"></p>\n<p><img src=\"/uploads/88cc18596c3c38549317a9c5198088bb/image.png\" alt=\"image\"></p>\n<hr>\n<h3 id=\"시스템콜-트러블슈팅\" style=\"position:relative;\"><a href=\"#%EC%8B%9C%EC%8A%A4%ED%85%9C%EC%BD%9C-%ED%8A%B8%EB%9F%AC%EB%B8%94%EC%8A%88%ED%8C%85\" aria-label=\"시스템콜 트러블슈팅 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>시스템콜 트러블슈팅</h3>\n<p>몇가지 마이너한 이슈가 있었습니다.</p>\n<p>시스템콜의 인자를 처리할때는 <strong>argint</strong>을 사용한다는 것을 몰라 사용하지 못했고, 좀 더 자료를 찾아본 후 적용가능했습니다.</p>\n<p><strong>monopolize</strong> 함수의 처리가 <strong>trap.c 내부</strong> 에서 일어나야 할지 , <strong>proc.c 내부</strong>에서 일어나야할지 선택해야 했습니다.</p>\n<p><strong>proc 구조체</strong>를 수정해 monopolize flag 자체는 <strong>proc.c 내부에서 수정</strong>하되 <strong>trap 내부에서  체크</strong>하여 적용하는 것으로 구현했습니다.</p>\n<h3 id=\"코드\" style=\"position:relative;\"><a href=\"#%EC%BD%94%EB%93%9C\" aria-label=\"코드 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>코드</h3>\n<p><a href=\"https://github.com/BecomeWeasel/Operating-System-xv6\">Operating-System-xv6</a></p>\n<div class=\"table-of-contents\">\n<ul>\n<li>\n<p><a href=\"#%EC%9A%B4%EC%98%81%EC%B2%B4%EC%A0%9C-%EA%B3%BC%EC%A0%9C-2implementing-simple-schedulers-on-xv6\">운영체제 과제 2(implementing simple schedulers on xv6)</a></p>\n<ul>\n<li><a href=\"#%ED%85%8C%EC%8A%A4%ED%8A%B8-%ED%99%98%EA%B2%BD\">테스트 환경</a></li>\n<li><a href=\"#%EA%B0%9C%EC%9A%94\">개요</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#fcfs\">FCFS</a></p>\n<ul>\n<li><a href=\"#%EA%B3%BC%EC%A0%9C-%EB%AA%85%EC%84%B8-\">과제 명세 :</a></li>\n<li><a href=\"#%EC%9E%91%EB%8F%99%EA%B3%BC%EC%A0%95-%EC%84%A4%EB%AA%85-\">작동과정 설명 :</a></li>\n<li><a href=\"#fcfs-test--%EA%B2%B0%EA%B3%BC%EC%99%80-%EA%B0%84%EB%8B%A8%ED%95%9C-%EC%84%A4%EB%AA%85\">FCFS Test  결과와 간단한 설명</a></li>\n<li><a href=\"#%ED%8A%B8%EB%9F%AC%EB%B8%94%EC%8A%88%ED%8C%85\">트러블슈팅</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#mlfq-multi-level-feedback-queue\">MLFQ (Multi Level Feedback Queue)</a></p>\n<ul>\n<li>\n<p><a href=\"#%EA%B3%BC%EC%A0%9C-%EB%AA%85%EC%84%B8--1\">과제 명세 :</a></p>\n</li>\n<li>\n<p><a href=\"#%EC%9E%91%EB%8F%99-%EA%B3%BC%EC%A0%95-%EC%84%A4%EB%AA%85\">작동 과정 설명:</a></p>\n<ul>\n<li><a href=\"#mlfq-%EA%B5%AC%EC%A1%B0%EB%8A%94-trapc%EA%B0%80-%EC%A4%91%EC%9A%94%ED%95%A9%EB%8B%88%EB%8B%A4\"><strong>MLFQ</strong> 구조는 trap.c가 중요합니다.</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#mlfq-test-%EA%B2%B0%EA%B3%BC%EC%99%80-%EA%B0%84%EB%8B%A8%ED%95%9C-%EC%84%A4%EB%AA%85\">MLFQ Test 결과와 간단한 설명</a></p>\n<ul>\n<li><a href=\"#%ED%8A%B8%EB%9F%AC%EB%B8%94%EC%8A%88%ED%8C%85-1\">트러블슈팅</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#%EC%8B%9C%EC%8A%A4%ED%85%9C-%EC%BD%9C\">시스템 콜</a></p>\n</li>\n<li>\n<p><a href=\"#%EC%8B%9C%EC%8A%A4%ED%85%9C-%EC%BD%9C-%EA%B3%B5%ED%86%B5-%EC%82%AC%ED%95%AD\">시스템 콜 공통 사항</a></p>\n<ul>\n<li><a href=\"#usyss\">usys.S</a></li>\n<li><a href=\"#userh\">user.h</a></li>\n<li><a href=\"#syscallh\">syscall.h</a></li>\n<li><a href=\"#syscallc\">syscall.c</a></li>\n<li><a href=\"#makefile-%EC%8B%9C%EC%8A%A4%ED%85%9C-%EC%BD%9C-%EB%B6%80%EB%B6%84\">Makefile 시스템 콜 부분</a></li>\n<li><a href=\"#makefile-%EC%BD%94%EB%93%9C-%EB%B6%84%EA%B8%B0%EB%A5%BC-%EC%9C%84%ED%95%B4%EC%84%9C-%EC%82%BD%EC%9E%85%ED%95%9C-%EB%B6%80%EB%B6%84\">Makefile 코드 분기를 위해서 삽입한 부분</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#%EC%8B%9C%EC%8A%A4%ED%85%9C%EC%BD%9C-%ED%8A%B8%EB%9F%AC%EB%B8%94%EC%8A%88%ED%8C%85\">시스템콜 트러블슈팅</a></p>\n</li>\n<li>\n<p><a href=\"#%EC%BD%94%EB%93%9C\">코드</a></p>\n</li>\n</ul>\n</li>\n</ul>\n</div>","frontmatter":{"date":"April 28, 2019","title":"운영체제 과제 2 (Implementing simple schedulers on xv6)","categories":"운영체제","author":"weasel","emoji":"💻"},"fields":{"slug":"/os-xv6-scheduler/"}},"site":{"siteMetadata":{"siteUrl":"https://becomeweasel.me","comments":{"utterances":{"repo":"BecomeWeasel/BecomeWeasel.github.io"}}}}},"pageContext":{"slug":"/os-user-level-unix-shell/","nextSlug":"","prevSlug":"/os-xv6-scheduler/"}},
    "staticQueryHashes": ["1073350324","1956554647","2938748437"]}