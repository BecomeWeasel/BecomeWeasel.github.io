{
    "componentChunkName": "component---src-templates-blog-template-js",
    "path": "/os-xv6-thread/",
    "result": {"data":{"cur":{"id":"855c7bac-c3be-59d4-9b55-84e267962b13","html":"<h2 id=\"운영체제-과제-3lwp\" style=\"position:relative;\"><a href=\"#%EC%9A%B4%EC%98%81%EC%B2%B4%EC%A0%9C-%EA%B3%BC%EC%A0%9C-3lwp\" aria-label=\"운영체제 과제 3lwp permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>운영체제 과제 3(LWP)</h2>\n<hr>\n<h3 id=\"테스트-환경\" style=\"position:relative;\"><a href=\"#%ED%85%8C%EC%8A%A4%ED%8A%B8-%ED%99%98%EA%B2%BD\" aria-label=\"테스트 환경 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>테스트 환경</h3>\n<ul>\n<li>OS : Ubuntu 16.04</li>\n<li>gcc : gcc 5.4.0</li>\n</ul>\n<h3 id=\"개요\" style=\"position:relative;\"><a href=\"#%EA%B0%9C%EC%9A%94\" aria-label=\"개요 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>개요</h3>\n<p>운영체제 세번째 과제인 <strong>Light-weight Process</strong>인 <strong>Thread</strong>에 대한 내용입니다.</p>\n<p>크게 <strong>thread_create</strong>, <strong>thread_exit</strong>, <strong>thread_join</strong>을 통해 구현됩니다.</p>\n<hr>\n<h2 id=\"thread-구현을-위한-proc-구조체-변경사항\" style=\"position:relative;\"><a href=\"#thread-%EA%B5%AC%ED%98%84%EC%9D%84-%EC%9C%84%ED%95%9C-proc-%EA%B5%AC%EC%A1%B0%EC%B2%B4-%EB%B3%80%EA%B2%BD%EC%82%AC%ED%95%AD\" aria-label=\"thread 구현을 위한 proc 구조체 변경사항 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>thread 구현을 위한 proc 구조체 변경사항</h2>\n<p><img src=\"/uploads/5d2ed70005c645abe01653c9da300640/image.png\" alt=\"image\"></p>\n<p><code class=\"language-text\">int isThread,int numOfThread,int nextThreadId,thread_t tid,void * retval, struct proc*p creator\n</code> 등을 추가했습니다.\n그중에서  creator 멤버는 기존 <strong>proc 구조체</strong>의 <strong>parent</strong>와 비슷한 역할을 수행합니다.</p>\n<p>이번 설계에서 process와 <strong>thread_create</strong>를 통해 생성된 thread는 <em>parent-child</em> 관계가 아니고 <strong>pid</strong>도 다르기 때문에 <strong>creator</strong>라는 포인터를 가짐으로써 <strong>최소한의 연결 관계</strong>를 유지해줍니다.</p>\n<blockquote>\n<p>이 방식은 아래에서 다시 설명합니다.</p>\n</blockquote>\n<p><em>(단 프로세스의 경우에는 creator와 parent가 같다고 생각합니다.)</em></p>\n<h2 id=\"기본적인-thread-기능-명세\" style=\"position:relative;\"><a href=\"#%EA%B8%B0%EB%B3%B8%EC%A0%81%EC%9D%B8-thread-%EA%B8%B0%EB%8A%A5-%EB%AA%85%EC%84%B8\" aria-label=\"기본적인 thread 기능 명세 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>기본적인 Thread 기능 명세</h2>\n<p>먼저 <strong>Thread</strong>의 기본 명세는 다음과 같습니다.\n<img src=\"/uploads/40a1e5a149b14d8fab65c1a96429415e/image.png\" alt=\"image\"></p>\n<ol>\n<li>LWP는 Process와는 다르게 주소 공간을 공유합니다.</li>\n<li>LWP는 본인을 생성한 Process와 다른 <strong>pid</strong> 값을 가집니다.</li>\n<li>LWP는 본인을 생성한 Process를 pointer로 <strong>creator</strong>에 저장함으로써 최소한의 연결관계를 유지합니다.</li>\n<li>LWP가 <strong>fork</strong>를 만나면 정상적으로 수행해야 합니다. <code class=\"language-text\">단, fork된 process는 LWP의 creator에는 접근이 불가합니다.</code></li>\n<li>LWP가 <strong>exec</strong>를 만나면 정상적으로 수행해야 합니다. <code class=\"language-text\">exec를 수행할때 , LWP의 creator의 다른 LWP들은 종료되어야 합니다.</code></li>\n<li>LWP가 <strong>exit</strong>를 만나면 다른 모든 LWP가 종료되어야 합니다.</li>\n<li>LWP의 creator가 kill의 대상이 되면 craetor의 다른 모든 LWP역시 종료되어야 합니다.</li>\n</ol>\n<h3 id=\"선언하고-구현한-시스템콜\" style=\"position:relative;\"><a href=\"#%EC%84%A0%EC%96%B8%ED%95%98%EA%B3%A0-%EA%B5%AC%ED%98%84%ED%95%9C-%EC%8B%9C%EC%8A%A4%ED%85%9C%EC%BD%9C\" aria-label=\"선언하고 구현한 시스템콜 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>선언하고 구현한 시스템콜</h3>\n<p><img src=\"/uploads/6122271cc214bc86d7acc206e0f735ab/image.png\" alt=\"image\"></p>\n<ol>\n<li><strong>thread_create</strong> : thread를 생성합니다. 기존의 시스템콜인 fork와 유사합니다.</li>\n<li><strong>thread_exit</strong> : thread를 종료합니다. 기존 시스템콜인 exit와 유사합니다. 이때 결과물을 proc 인자로 받은 retval 안에 저장합니다.</li>\n<li><strong>thread_join</strong> : 특정 thread를 기다립니다. 기존 시스템콜인 wait과 유사합니다. 다른 점은 인자로 받은 double-pointer에 return 값을 저장합니다.</li>\n<li>(<strong>thread_exit_target</strong>) : 명세에는 표시되지 않았지만, 특정 쓰레드를 종료시키기 위해서 직접 구현했습니다.</li>\n</ol>\n<h2 id=\"thread-세부-설명\" style=\"position:relative;\"><a href=\"#thread-%EC%84%B8%EB%B6%80-%EC%84%A4%EB%AA%85\" aria-label=\"thread 세부 설명 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Thread 세부 설명</h2>\n<h3 id=\"thread의-생성--thread_create\" style=\"position:relative;\"><a href=\"#thread%EC%9D%98-%EC%83%9D%EC%84%B1--thread_create\" aria-label=\"thread의 생성  thread_create permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Thread의 생성 : thread_create</h3>\n<p>첫번째로 <strong>thread_create</strong> 함수에 대해서 설명과 예시입니다.</p>\n<p>먼저 함수의 인자에 대해서 간략히 설명합니다.</p>\n<ol>\n<li>첫번째 인자인 <strong>thread_t * thread</strong>는 thread 생성이 끝난 후 추적을 위해 Thread의 id를 저장하는 용도로 사용했습니다.</li>\n<li>두번째 인자인 <strong>함수 포인터 start_routine</strong>은 생성된 Thread가 해야하는 함수의 진입점으로 사용됩니다.</li>\n<li>세번째 인자인 <strong>void * arg</strong>는 두번째 인자인 함수를 수행하는데 사용되는 것으로 ustack에 저장됩니다.</li>\n</ol>\n<p>전체적인 동작사항은 <strong>fork</strong> 시스콜과 다르지 않지만\n<img src=\"/uploads/776540ffcb888d9b96b73dd798687230/%E1%84%89%E1%85%B3%E1%84%8F%E1%85%B3%E1%84%85%E1%85%B5%E1%86%AB%E1%84%89%E1%85%A3%E1%86%BA_2019-06-02_14.19.43\" alt=\"image\">\n위의 부분에서 <code class=\"language-text\">allocproc</code>를 통해 반환받은 proc 구조체를</p>\n<p>thread 처럼 동작하게끔 하기 위해  <strong>isThread</strong> 값을 1로 설정해주고 , <strong>tid</strong>값을 현재 proc의 <strong>nextThreadId</strong>값을 가져와서 설정해줍니다.</p>\n<blockquote>\n<p><code class=\"language-text\">단 이 tid는 연속적이나, 실행되고 있는 Thread들의 tid는 연속적임을 보장하지 않습니다. Ex) tid : 1 2 5 6</code></p>\n</blockquote>\n<p><strong>creator</strong>를 현재 Process로 설정해줍니다. 이를 통해 thread와 Process간의 <em>Parent-Child</em> 관계는 아니지만 <em>(<code class=\"language-text\">np->parent=curproc->parent</code> 이기 때문에)</em>\n<strong>어느 정도의 관계를 가지고 있게끔 구현했습니다.</strong>\n또 시작지점을 설정하는 부분에서는 기존 시스템콜인 <strong>exec</strong>을 참고하였습니다.\n<img src=\"/uploads/8b295403924960ff8613158134065669/%E1%84%89%E1%85%B3%E1%84%8F%E1%85%B3%E1%84%85%E1%85%B5%E1%86%AB%E1%84%89%E1%85%A3%E1%86%BA_2019-06-02_14.19.54\" alt=\"mage\"></p>\n<p><strong>ustack</strong>을 만들어주고 <strong>copyout</strong>을 통해서 복사해줍니다.</p>\n<p><code class=\"language-text\">np->tf->eip=(uint)start_routine</code>\n또 <strong>eip</strong>값을 인자로  들어온 start_routine으로 설정해주어서 thread 가 수행할\n함수의 진입점을 올바르게 설정해줍니다.</p>\n<p>또 LWP끼리는 주소공간을 공유해야 하기 때문에</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">acquire(&amp;ptable.lock);\nstruct proc* p;\n~~~\nfor(p=ptable.proc;p&lt;&amp;ptable.proc[NPROC];p++){\n             if(p->parent->pid==np->parent->pid){\n                     p->sz=np->sz;\n               }\n}\n~~~\nrelease(&amp;ptable.lock);</code></pre></div>\n<p>위와 같은 코드를 통해서 sz값을 공유시켜줍니다. 이를 통해 <strong>Memory Illegal Access</strong> 문제를 방지 할 수 있습니다.</p>\n<p><strong>fork</strong> 시스템콜에서는 생성된 Process의 <strong>pid</strong>값을 반환했지만, thread_create에서는 인자로 전달받은\n<strong>thread_t * thread</strong>에 thread의 <strong>tid</strong>를 저장해줍니다.</p>\n<h3 id=\"thread의-종료--thread_exit\" style=\"position:relative;\"><a href=\"#thread%EC%9D%98-%EC%A2%85%EB%A3%8C--thread_exit\" aria-label=\"thread의 종료  thread_exit permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Thread의 종료 : thread_exit</h3>\n<p>두번째로 <strong>thread_exit</strong> 함수에 대해서 설명과 예시입니다.</p>\n<p>반환형은 void이고 함수의 인자에 대해서 설명합니다.</p>\n<ol>\n<li>첫번째 인자인 <strong>void * retval</strong> 입니다.  thread가 종료될때 이 인자에 결과값을 저장합니다.</li>\n</ol>\n<p>전체적인 동작은 <strong>exit</strong> 시스템콜과 크게 다르지 않습니다.</p>\n<p><img src=\"/uploads/ce2b52e8683caf4263e93293310e6302/%E1%84%89%E1%85%B3%E1%84%8F%E1%85%B3%E1%84%85%E1%85%B5%E1%86%AB%E1%84%89%E1%85%A3%E1%86%BA_2019-06-02_15.46.52\" alt=\"image\"></p>\n<p>한가지 다른점은</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">curproc->creator->numOfThread--;</code></pre></div>\n<p>을 통해 자신이 속해있는 Process의 쓰레드 개수를 줄이는 기록을 합니다.</p>\n<h3 id=\"thread가-끝나기를-기다림--thread_join\" style=\"position:relative;\"><a href=\"#thread%EA%B0%80-%EB%81%9D%EB%82%98%EA%B8%B0%EB%A5%BC-%EA%B8%B0%EB%8B%A4%EB%A6%BC--thread_join\" aria-label=\"thread가 끝나기를 기다림  thread_join permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Thread가 끝나기를 기다림 : thread_join</h3>\n<p>세번째로 <strong>thread_join</strong> 함수의 설명입니다.</p>\n<p>반환형은 int로, join이 성공적이면 0을 .그렇지 않으면 다른 값을 반환합니다.</p>\n<p>함수의 인자는 두개 입니다.</p>\n<ol>\n<li>첫번째 인자인 <strong>thread_t thread</strong>입니다. join의 대상 thread를 지칭하는데 사용됩니다.</li>\n<li>두번째 인자는 <strong>void retval()</strong> 입니다. thread_exit을 통해서 반환된 값을 저장해줍니다.</li>\n</ol>\n<p><strong>thread_join</strong>도 기존의 <strong>wait</strong>시스템콜과 유사합니다.</p>\n<p><img src=\"/uploads/b0439082ad6e66ea166ed1880430df88/%E1%84%89%E1%85%B3%E1%84%8F%E1%85%B3%E1%84%85%E1%85%B5%E1%86%AB%E1%84%89%E1%85%A3%E1%86%BA_2019-06-02_15.59.34\" alt=\"image\"></p>\n<p>다른 점이 몇가지 있는데</p>\n<ol>\n<li><code class=\"language-text\">freevm(p->pgdir)</code>을 사용하지 않습니다. 주소공간을 공유하기 때문에 이 함수를 join에서는 사용하지 않습니다.</li>\n<li><code class=\"language-text\">*retval=p->retval</code>이라는 새로운 코드를 추가합니다. 인자로 전달받은 <strong>double-pointer retval</strong>에 저장합니다. 이를 통해 완료된 값들을 받아갈 수 있습니다.</li>\n</ol>\n<p>또 한가지 중요한점은</p>\n<p><code class=\"language-text\">sleep (curproc,&amp;ptable.lock);</code></p>\n<p>을 사용한다는 점입니다(기존의 <strong>wait</strong>에도 존재합니다.) 이를 통해서 모든 자식들이 끝나기를 기다립니다.</p>\n<h3 id=\"xv6와의-상호작용\" style=\"position:relative;\"><a href=\"#xv6%EC%99%80%EC%9D%98-%EC%83%81%ED%98%B8%EC%9E%91%EC%9A%A9\" aria-label=\"xv6와의 상호작용 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>xv6와의 상호작용</h3>\n<ul>\n<li>일부기능을 제외하고는 프로세스와 같이 움직여야 하며 , 내장 스케쥴러인 RR을 사용합니다 *</li>\n</ul>\n<ol>\n<li><strong>Fork</strong> 의 경우에는 LWP의 대부분의 기능이 Process와 비슷하게 동작하기 때문에 큰 수정 없이 정상작동합니다.</li>\n<li><strong>Exec</strong>의 경우에도 큰 수정 없이 정상작동합니다. <em>단 , thread가 exec를 만났을때,자신을 제외한 같은 프로세스에 속해 있는 다른 thread을 종료해야 하도록 구현했습니다.</em></li>\n<li><strong>sbrk</strong>의 경우에는 <strong>growproc</strong> 시스템콜의 수정이 필요합니다. 스레드의 주소공간이 늘어났다면, 같은 프로세스 군에 속해있는 모든 thread가 이 변경된 <strong>sz</strong>의 값을 알아야합니다. 그렇기에 아래처럼 같은 군에 속해있거나 특정 프로세스(프로세스 군의 main)의 sz를 변경해줍니다. 그렇지 않으면 <strong>page fault</strong>가 나는것을 확인했습니다.</li>\n<li>growproc에서 sz을 접근할때, 다른 스레드가 sz를 수정중일 수 있으니 growproc 전체적으로 ptable lock을 잡아야합니다.</li>\n<li><strong>kill</strong>의 경우에는 <strong>thread_kill</strong> test 에서 다시 언급하겠지만, Process가 kill을 당하면 그 프로세스에 속해있는 모든 프로세스를 종료해줍니다. 기존의 <strong>kill</strong> 시스템콜에서 조금의 추가가 있습니다.</li>\n<li><strong>Exit</strong>의 경우에 thread가 exit을  만나면 같은 프로세스에 속해있는 다른 thread와 자기 자신을 종료하도록 구현했습니다.</li>\n</ol>\n<h3 id=\"xv6와의-상호작용---기존-시스템콜-변경점\" style=\"position:relative;\"><a href=\"#xv6%EC%99%80%EC%9D%98-%EC%83%81%ED%98%B8%EC%9E%91%EC%9A%A9---%EA%B8%B0%EC%A1%B4-%EC%8B%9C%EC%8A%A4%ED%85%9C%EC%BD%9C-%EB%B3%80%EA%B2%BD%EC%A0%90\" aria-label=\"xv6와의 상호작용   기존 시스템콜 변경점 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>xv6와의 상호작용 - 기존 시스템콜 변경점</h3>\n<h2 id=\"kill\" style=\"position:relative;\"><a href=\"#kill\" aria-label=\"kill permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>kill</h2>\n<p><img src=\"/uploads/b0c6b1a1d3ce4b9d59f436f91119a0e1/image.png\" alt=\"image\">\n<strong>kill</strong> 시스템에 다른부분은 기존과 동일하지만 사진과 같이</p>\n<p>ptable을 돌면서 같은 process 집합에 속해있는 Thread들을 killed=1로 바꿉니다.\n이것은 <strong>kill</strong>의 시스템콜의 기능과 유사합니다. 이것을 통해서 프로세스가 kill 되었을때 속해있는 다른 쓰레드들도 kill을 당하게 합니다.</p>\n<h2 id=\"exit\" style=\"position:relative;\"><a href=\"#exit\" aria-label=\"exit permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>exit</h2>\n<p><img src=\"/uploads/17425f0e7562f96082effafa59ecbad0/%E1%84%89%E1%85%B3%E1%84%8F%E1%85%B3%E1%84%85%E1%85%B5%E1%86%AB%E1%84%89%E1%85%A3%E1%86%BA_2019-06-02_23.49.20\" alt=\"image\"></p>\n<p>exit도 ptable을 돌면서 자신과 같은 프로세스군에 있지만 자신을 제외한 스레드를 종료하고 같은 집합에 속해있는 Process도 삭제하는\nkillAllFromThread을 호출하여 exit을 수행합니다.</p>\n<p>위의 상황은 thread가 exit을 만낫을때고 Process가 exit을 만낫을때도 자신이 생성한 thread를 모두 죽이는 역할을 수행하는것이\nkillAllFromThread입니다.</p>\n<h2 id=\"growproc\" style=\"position:relative;\"><a href=\"#growproc\" aria-label=\"growproc permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>growproc</h2>\n<p>상기 언급한것과 같이 sz사이즈를 전체적으로 조절합니다.</p>\n<p><em>단 좀더 광범위하게 ptable에 대한 lock을 요청하여 다른 쓰레드가 sz를 수정하는것을 방지합니다.</em></p>\n<h2 id=\"test-결과\" style=\"position:relative;\"><a href=\"#test-%EA%B2%B0%EA%B3%BC\" aria-label=\"test 결과 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Test 결과</h2>\n<p>테스트 결과입니다.</p>\n<ul>\n<li><strong>단 앞단에 기재한것과 같이 test 구동에 문제가 있기에 테스트 하나를 끝내고 xv6를 다시 실행해야 합니다.</strong></li>\n</ul>\n<h3 id=\"thread_test-1createexitjoin\" style=\"position:relative;\"><a href=\"#thread_test-1createexitjoin\" aria-label=\"thread_test 1createexitjoin permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>thread_test 1:create,exit,join</h3>\n<p><em>생성하는 thread의 개수를 3개로 늘려서 진행해보았습니다.</em>\n<img src=\"/uploads/88aed5934e84b9ebf40262897da159a1/%E1%84%89%E1%85%B3%E1%84%8F%E1%85%B3%E1%84%85%E1%85%B5%E1%86%AB%E1%84%89%E1%85%A3%E1%86%BA_2019-06-02_18.42.45\" alt=\"image\">\n정상적으로 thread를 3개 생성하고, 3개 exit 한후 join해서 정상적으로 테스트를 수행합니다.</p>\n<h3 id=\"thread_test-2fork\" style=\"position:relative;\"><a href=\"#thread_test-2fork\" aria-label=\"thread_test 2fork permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>thread_test 2:fork</h3>\n<p><img src=\"/uploads/402aad68dca594cee267a02c52b35e3c/%E1%84%89%E1%85%B3%E1%84%8F%E1%85%B3%E1%84%85%E1%85%B5%E1%86%AB%E1%84%89%E1%85%A3%E1%86%BA_2019-06-02_18.42.48\" alt=\"image\">\nthread 내에서 fork를 진행한후 정상적으로 끝내는 모습을 확인할 수 있습니다.</p>\n<h3 id=\"thread_test-3sbrk\" style=\"position:relative;\"><a href=\"#thread_test-3sbrk\" aria-label=\"thread_test 3sbrk permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>thread_test 3:sbrk</h3>\n<p><img src=\"/uploads/6155d1f53d391be2e16296cd1074b14f/%E1%84%89%E1%85%B3%E1%84%8F%E1%85%B3%E1%84%85%E1%85%B5%E1%86%AB%E1%84%89%E1%85%A3%E1%86%BA_2019-06-02_18.42.55\" alt=\"image\">\nthread 내에서 malloc을 사용해 <strong>growproc</strong>을 호출하고 , free(dealloc)을 사용해 다시 <strong>growproc</strong>을 정상적으로 호출하는 것을 볼 수 있습니다. <strong>growproc</strong>을 수정하지 않으면 remap 패닉이 발생합니다.</p>\n<p>thread_test 내 3가지 세부 테스트 모두 성공한 것을 확인 할 수 있습니다.</p>\n<hr>\n<h3 id=\"thread_exec\" style=\"position:relative;\"><a href=\"#thread_exec\" aria-label=\"thread_exec permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>thread_exec</h3>\n<p><img src=\"/uploads/cb991620e5e5a68289c89a5035f704ca/image.png\" alt=\"image\">\nthread가 exec을 만났을때, 자신을 제외한 thread를 모두 종료시키고</p>\n<p>정상적으로 Hello, thread를 출력하는것을 확인 할 수 있습니다.</p>\n<h3 id=\"thread_exit\" style=\"position:relative;\"><a href=\"#thread_exit\" aria-label=\"thread_exit permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>thread_exit</h3>\n<p><img src=\"/uploads/4fdba2cf49166bfe206bfbe0f37fea0a/image.png\" alt=\"image\">\nthread가 exit을 만났을때, 그 프로세스 내의 모든 thraed를 종료시키는 테스트입니다.\n정상작동합니다.</p>\n<h3 id=\"thread_kill\" style=\"position:relative;\"><a href=\"#thread_kill\" aria-label=\"thread_kill permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>thread_kill</h3>\n<p><img src=\"/uploads/57a3542705244a4187d975aeee74ed82/image.png\" alt=\"image\">\nthread가 속한 프로세스가 kill 되었을때, 그 프로세스에 속한 thread를 모두 종료시키는 테스트입니다.\n정상작동합니다. zombie 프로세스 역시 생기지 않습니다.</p>\n<h3 id=\"트러블슈팅\" style=\"position:relative;\"><a href=\"#%ED%8A%B8%EB%9F%AC%EB%B8%94%EC%8A%88%ED%8C%85\" aria-label=\"트러블슈팅 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>트러블슈팅</h3>\n<p>thread의 기본적인 생성과 종료,그리고 join을 구현하는데 있어서 막막한 감이 있었습니다.</p>\n<p>기존 xv6의 <strong>fork,exec,allocproc,wait,exit</strong>의 코드등을 참고해서 새로운 시스템 콜들을 만들었고</p>\n<p>기존의 시스템콜 역시 thread의 상황에 맞게 적절히 수정했습니다.</p>\n<p>예를들어 thread_create 부분에서 단순히 <strong>fork 시스템콜</strong>의</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">switchuvm(np)</code></pre></div>\n<p>라는 부분이 있었는데, 이것을 <strong>thread_create</strong>단으로 가져오니 알 수 없는 이유의패닉이 자꾸 발생하였고,</p>\n<p>switchuvm의 주요 목표가 <strong>cr3 레지스터의</strong> 값을 변경하는것 이라는걸 알기 위해서</p>\n<p>수업시간에 진행했던 lab pdf를 참조 후 그 부분을<br>\n다음과 같이 수정했습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">// switchuvm-like\npushcli();\nlcr3(V2P(np->pgdir));\npopcli();</code></pre></div>\n<p>이렇게 수정하고 나니 패닉도 발생하지 않았고, 원하는 대로 함수가 구현되었습니다.</p>\n<h3 id=\"미구현점-혹은-남은-문제사항\" style=\"position:relative;\"><a href=\"#%EB%AF%B8%EA%B5%AC%ED%98%84%EC%A0%90-%ED%98%B9%EC%9D%80-%EB%82%A8%EC%9D%80-%EB%AC%B8%EC%A0%9C%EC%82%AC%ED%95%AD\" aria-label=\"미구현점 혹은 남은 문제사항 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>미구현점 혹은 남은 문제사항</h3>\n<p><strong>하단에 표시된 문제사항 최신 커밋 기준으로 해결되었습니다.</strong></p>\n<h3 id=\"코드\" style=\"position:relative;\"><a href=\"#%EC%BD%94%EB%93%9C\" aria-label=\"코드 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>코드</h3>\n<p><a href=\"https://github.com/BecomeWeasel/Operating-System-xv6\">Operating-System-xv6</a></p>\n<div class=\"table-of-contents\">\n<ul>\n<li>\n<p><a href=\"#%EC%9A%B4%EC%98%81%EC%B2%B4%EC%A0%9C-%EA%B3%BC%EC%A0%9C-3lwp\">운영체제 과제 3(LWP)</a></p>\n<ul>\n<li><a href=\"#%ED%85%8C%EC%8A%A4%ED%8A%B8-%ED%99%98%EA%B2%BD\">테스트 환경</a></li>\n<li><a href=\"#%EA%B0%9C%EC%9A%94\">개요</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#thread-%EA%B5%AC%ED%98%84%EC%9D%84-%EC%9C%84%ED%95%9C-proc-%EA%B5%AC%EC%A1%B0%EC%B2%B4-%EB%B3%80%EA%B2%BD%EC%82%AC%ED%95%AD\">thread 구현을 위한 proc 구조체 변경사항</a></p>\n</li>\n<li>\n<p><a href=\"#%EA%B8%B0%EB%B3%B8%EC%A0%81%EC%9D%B8-thread-%EA%B8%B0%EB%8A%A5-%EB%AA%85%EC%84%B8\">기본적인 Thread 기능 명세</a></p>\n<ul>\n<li><a href=\"#%EC%84%A0%EC%96%B8%ED%95%98%EA%B3%A0-%EA%B5%AC%ED%98%84%ED%95%9C-%EC%8B%9C%EC%8A%A4%ED%85%9C%EC%BD%9C\">선언하고 구현한 시스템콜</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#thread-%EC%84%B8%EB%B6%80-%EC%84%A4%EB%AA%85\">Thread 세부 설명</a></p>\n<ul>\n<li><a href=\"#thread%EC%9D%98-%EC%83%9D%EC%84%B1--thread_create\">Thread의 생성 : thread_create</a></li>\n<li><a href=\"#thread%EC%9D%98-%EC%A2%85%EB%A3%8C--thread_exit\">Thread의 종료 : thread_exit</a></li>\n<li><a href=\"#thread%EA%B0%80-%EB%81%9D%EB%82%98%EA%B8%B0%EB%A5%BC-%EA%B8%B0%EB%8B%A4%EB%A6%BC--thread_join\">Thread가 끝나기를 기다림 : thread_join</a></li>\n<li><a href=\"#xv6%EC%99%80%EC%9D%98-%EC%83%81%ED%98%B8%EC%9E%91%EC%9A%A9\">xv6와의 상호작용</a></li>\n<li><a href=\"#xv6%EC%99%80%EC%9D%98-%EC%83%81%ED%98%B8%EC%9E%91%EC%9A%A9---%EA%B8%B0%EC%A1%B4-%EC%8B%9C%EC%8A%A4%ED%85%9C%EC%BD%9C-%EB%B3%80%EA%B2%BD%EC%A0%90\">xv6와의 상호작용 - 기존 시스템콜 변경점</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#kill\">kill</a></p>\n</li>\n<li>\n<p><a href=\"#exit\">exit</a></p>\n</li>\n<li>\n<p><a href=\"#growproc\">growproc</a></p>\n</li>\n<li>\n<p><a href=\"#test-%EA%B2%B0%EA%B3%BC\">Test 결과</a></p>\n<ul>\n<li><a href=\"#thread_test-1createexitjoin\">thread_test 1:create,exit,join</a></li>\n<li><a href=\"#thread_test-2fork\">thread_test 2:fork</a></li>\n<li><a href=\"#thread_test-3sbrk\">thread_test 3:sbrk</a></li>\n<li><a href=\"#thread_exec\">thread_exec</a></li>\n<li><a href=\"#thread_exit\">thread_exit</a></li>\n<li><a href=\"#thread_kill\">thread_kill</a></li>\n<li><a href=\"#%ED%8A%B8%EB%9F%AC%EB%B8%94%EC%8A%88%ED%8C%85\">트러블슈팅</a></li>\n<li><a href=\"#%EB%AF%B8%EA%B5%AC%ED%98%84%EC%A0%90-%ED%98%B9%EC%9D%80-%EB%82%A8%EC%9D%80-%EB%AC%B8%EC%A0%9C%EC%82%AC%ED%95%AD\">미구현점 혹은 남은 문제사항</a></li>\n<li><a href=\"#%EC%BD%94%EB%93%9C\">코드</a></li>\n</ul>\n</li>\n</ul>\n</div>","excerpt":"운영체제 과제 3(LWP) 테스트 환경 OS : Ubuntu 16.04 gcc : gcc 5.4.0 개요 운영체제 세번째 과제인 Light-weight Process인 Thread에 대한 내용입니다. 크게 thread_create, thread_exit, thread_join을 통해 구현됩니다. thread 구현을 위한 proc 구조체 변경사항 image  등을 추가했습니다.\n그중에서  creator 멤버는 기존 proc 구조체의 parent와 비슷한 역할을 수행합니다. 이번 설계에서 process와 thread_create를 통해 생성된 thread는 parent-child 관계가 아니고 pid도 다르기 때문에 creator라는 포인터를 가짐으로써 최소한의 연결 관계를 유지해줍니다. 이 방식은 아래에서 다시 설명합니다. (단 프로세스의 경우에는 creator와 parent가 같다고 생각합니다.) 기본적인 Thread 기능 명세 먼저 Thread의 기본 명세는 다음과 같습니다.\ni…","frontmatter":{"date":"June 02, 2019","title":"운영체제 과제 3 (LWP)","categories":"운영체제","author":"weasel","emoji":"💻"},"fields":{"slug":"/os-xv6-thread/"}},"next":{"id":"6b3dc350-65b2-5e76-bbc1-dbd475110e49","html":"<h2 id=\"운영체제-과제-2implementing-simple-schedulers-on-xv6\" style=\"position:relative;\"><a href=\"#%EC%9A%B4%EC%98%81%EC%B2%B4%EC%A0%9C-%EA%B3%BC%EC%A0%9C-2implementing-simple-schedulers-on-xv6\" aria-label=\"운영체제 과제 2implementing simple schedulers on xv6 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>운영체제 과제 2(implementing simple schedulers on xv6)</h2>\n<hr>\n<h3 id=\"테스트-환경\" style=\"position:relative;\"><a href=\"#%ED%85%8C%EC%8A%A4%ED%8A%B8-%ED%99%98%EA%B2%BD\" aria-label=\"테스트 환경 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>테스트 환경</h3>\n<ul>\n<li>OS : Ubuntu 16.04</li>\n<li>gcc : gcc 5.4.0</li>\n</ul>\n<h3 id=\"개요\" style=\"position:relative;\"><a href=\"#%EA%B0%9C%EC%9A%94\" aria-label=\"개요 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>개요</h3>\n<p>운영체제 두번째 과제인 <strong>Implementing simple schedulers (FCFS,MLFQ)</strong> 에 대한 내용입니다.</p>\n<p>크게 <strong>FCFS</strong> 정책과 <strong>MLFQ</strong> 정책을 사용하게끔 분기됩니다.</p>\n<hr>\n<h2 id=\"fcfs\" style=\"position:relative;\"><a href=\"#fcfs\" aria-label=\"fcfs permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>FCFS</h2>\n<h3 id=\"과제-명세-\" style=\"position:relative;\"><a href=\"#%EA%B3%BC%EC%A0%9C-%EB%AA%85%EC%84%B8-\" aria-label=\"과제 명세  permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>과제 명세 :</h3>\n<p>먼저 <strong>FCFS</strong> 스케쥴링의 명세는 다음과 같습니다.\n<img src=\"/uploads/9376767e42f0679e907b477b13881137/image.png\" alt=\"image\"></p>\n<ol>\n<li>먼저 생성(fork())된 프로세스가 먼저 스케줄링 되어야 한다.</li>\n<li>스케줄링된 프로세스는 종료되기 전까지는 swithc-out 되지 않는다.</li>\n<li>프로세스가 스케쥴링 된 이후 100ticks이 지날때까지 종료되거나 sleeping 하지 않으면 종료해야한다.</li>\n<li>실행중인 프로세스가 sleeping으로 전환되면 다음 프로세스가 스케줄링된다.</li>\n<li>sleeping 상태이면서 먼저 생성된 P가 깨어나면 그 프로세스로 스케줄링 된다.</li>\n</ol>\n<h3 id=\"작동과정-설명-\" style=\"position:relative;\"><a href=\"#%EC%9E%91%EB%8F%99%EA%B3%BC%EC%A0%95-%EC%84%A4%EB%AA%85-\" aria-label=\"작동과정 설명  permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>작동과정 설명 :</h3>\n<p>첫번째로 <strong>FCFS</strong> 스케쥴링 정책 내에서의 작동 과정,설정값들과 예시입니다.</p>\n<p>먼저, <strong>ptable</strong>에는 <strong>pid</strong> 순서대로(<strong>만들어진 순서대로</strong>) 삽입되어 있습니다.\n<img src=\"/uploads/884497de7c33bd122c0b64d26c90f137/image.png\" alt=\"image\"></p>\n<p>그렇기 때문에 <strong>ptable</strong>에서 ptable.proc[0,1,2,3…]이렇게 접근을 한다면 생성된 프로세스에 접근을 할 수 있습니다.</p>\n<p>또, <strong>pid</strong> 순서대로 들어있기 때문에 별도의 큰 조작 없이도 <strong>First Come First Served</strong>의 스케쥴링이 수행가능합니다. (1번 명세)</p>\n<p>하지만 기존의 정의되어 있는 <strong>struct proc</strong>에는 이 Process가 얼마만큼의 시간동안 수행되었는지에 대한 정보를 담고있지 않기 때문에\n<img src=\"/uploads/5b2ccefaaed7ef774667e8c12e06c734/image.png\" alt=\"image\">\n위와 같이 <strong>uint ctime</strong>과 <strong>uint stime</strong>을 추가해줍니다.\n<strong>ctime</strong>의 역할은 프로세스가 생성된 시간을 의미하고,</p>\n<p><em>(사실 pid가 이 역할을 대체할 수 있고 더 정확합니다.)</em></p>\n<p><strong>stime</strong>은 스케쥴러에 의해 이 Process가 선택된 시간(<strong>ticks</strong>)을 의미합니다.\n<img src=\"/uploads/00a6b066762c33ded7fa12b22e20e920/image.png\" alt=\"image\">\n위의 사진처럼 <strong>FCFS</strong> 알고리즘에 의해서 선택되었을때 , <strong>stime</strong>을 현재의 <strong>ticks</strong>로 설정해줍니다.</p>\n<p><strong>FCFS</strong> 알고리즘의 역할은 <strong>가장 이전에 생성된,다시 말해서 pid가 가장 작고 현재 수행가능한 상태(RUNNABLE)</strong> 인</p>\n<p>Process를 고르는 것입니다..</p>\n<p>그렇기 때문에  아래와 같은 code block으로 조건을 만족하는 적합한 Process를 선택합니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">for(p=ptable.proc;p&lt;&amp;ptable.proc[NPROC];p++){  // ptable.proc을 앞에서부터 순차적으로 탐색함, NPROC까지 탐색함\nif(p->state!=RUNNABLE)\n     continue;\nelse{\n     p->stime=ticks;\n     ...\n     p->state=RUNNING\n    ...\n     swtch(&amp;(c->scheduelr),p->context);\n    ...\n}</code></pre></div>\n<p>SLPEEING이 끝나고 wake 하게 될때도 <strong>ptable</strong> 을 순차적으로  앞에서부터 탐색하기 때문에\n<strong>pid가 낮은,먼저 생성된</strong> Process를 처리할 수 있습니다.</p>\n<p>또, <strong>실행된지 100ticks</strong>가 넘어갔을때 종료하는 조건은 trap.c 내에\n<img src=\"/uploads/b63c63d6710bfafd031e6c31ebfb46cf/image.png\" alt=\"image\">\n로 구성되어 있습니다. <strong>현재 tick</strong>에서 <strong>stime</strong> 을 뺀 결과가 100보다 크거나 같다는 뜻은,</p>\n<p>이 Process가 100tick이상 run되었다는 뜻입니다.<em><strong>(항상 스케쥴될때 stime=0으로 현재 ticks으로 초기화)</strong></em></p>\n<p>그렇기 때문에 이 Process의 killed을 1로 바꿔주고, 이렇게 되면 다음 timer때 이 프로세스는 죽습니다.</p>\n<hr>\n<h3 id=\"fcfs-test--결과와-간단한-설명\" style=\"position:relative;\"><a href=\"#fcfs-test--%EA%B2%B0%EA%B3%BC%EC%99%80-%EA%B0%84%EB%8B%A8%ED%95%9C-%EC%84%A4%EB%AA%85\" aria-label=\"fcfs test  결과와 간단한 설명 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>FCFS Test  결과와 간단한 설명</h3>\n<p><strong>조건 : NUM_CHILD를 5에서 7로 수정,</strong></p>\n<p>첫번째 테스트 <strong>(sleep이나 yield를 하지 않고)</strong>\n<img src=\"/uploads/26c4e44ff3c7c9e1032ab8f0c319c246/image.png\" alt=\"image\">\n예상대로, sleep,yield 아무것도 하지 않았으니 먼저 생성되는 P5부터 P11까지 출력을 순차적으로 진행합니다.</p>\n<p>두번째 테스트 <strong>(yield를 할때)</strong>\n<img src=\"/uploads/d320b1efb3467ccd89b3cb52d1574e49/image.png\" alt=\"image\">\n예상대로, yeild를 하더라도 먼저 생성된 프로세스에게 우선권이 있으므로 다시 CPU 사용권한이 돌아와 진행합니다.</p>\n<p>세번째 테스트 <strong>(sleep)</strong> 을 할때\n<img src=\"/uploads/a91f11df912e082c6ac0713405d9217f/image.png\" alt=\"image\">\nsleep을 하면 순차적으로 진행되는것처럼 보이지만 ,\n…P25->P19->P20->P21->P22->P23->P24-><strong>P19</strong> 이부분에서</p>\n<p>P24의 다음으로 P25가 스케쥴링되는것이 아니라 wakeup한 P19가 선택되어 진행됩니다.</p>\n<p>이러한 현상은 꾸준히 관찰할수 있습니다만, 테스팅되는 하드웨어에 따라 상황이 달라짐을 확인했습니다.</p>\n<p>네번째 테스트 <strong>100tick을 초과했을때</strong>\n<img src=\"/uploads/0e06336891b53083ccef92a099c4b318/image.png\" alt=\"image\">\n예상대로 , <strong>pid</strong>가 가장 작은 프로세스가 실행되다가 100tick이 지나면 강제종료되고,</p>\n<p>다음 프로세스가 스케줄링됨을 확인할수 있습니다. 또 모든 자식 프로세스가 강제 종료되면 OK메세지를 확인가능합니다.</p>\n<hr>\n<h3 id=\"트러블슈팅\" style=\"position:relative;\"><a href=\"#%ED%8A%B8%EB%9F%AC%EB%B8%94%EC%8A%88%ED%8C%85\" aria-label=\"트러블슈팅 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>트러블슈팅</h3>\n<p><strong>FCFS</strong>는 비교적 간단한 구현이어서 <strong>FCFS</strong> 그 자체는 크게 어렵지는 않았습니다.\n다만 xv6의 내부적인 기능을 처음 구현하다보니 sched 함수나 scheduler 함수와 같은 중추적인 함수들을 분석하는데 시간을 쏟았습니다.</p>\n<p>또 trap.c 함수 내에서의 trap 함수가 어떻게 사용되는지 분석하는데 시간을 투자했습니다..</p>\n<hr>\n<h2 id=\"mlfq-multi-level-feedback-queue\" style=\"position:relative;\"><a href=\"#mlfq-multi-level-feedback-queue\" aria-label=\"mlfq multi level feedback queue permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>MLFQ (Multi Level Feedback Queue)</h2>\n<h3 id=\"과제-명세--1\" style=\"position:relative;\"><a href=\"#%EA%B3%BC%EC%A0%9C-%EB%AA%85%EC%84%B8--1\" aria-label=\"과제 명세  1 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>과제 명세 :</h3>\n<p>먼저 <strong>MLFQ</strong> 스케쥴링의 명세는 다음과 같습니다.\n<img src=\"/uploads/5fe7300fb417744603dc91b4369ece6b/image.png\" alt=\"image\">\n<img src=\"/uploads/20b2cad85cfe658d7fad59fc4b8a77c3/image.png\" alt=\"image\"></p>\n<h3 id=\"작동-과정-설명\" style=\"position:relative;\"><a href=\"#%EC%9E%91%EB%8F%99-%EA%B3%BC%EC%A0%95-%EC%84%A4%EB%AA%85\" aria-label=\"작동 과정 설명 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>작동 과정 설명:</h3>\n<p><strong>MLFQ</strong> 구현의 가장 중요한 점은 <strong>L0 큐</strong>와 <strong>L1 큐</strong> 각각의 스케쥴링 알고리즘이 같은 부분이 존재하지만 몇가지 점이 다르다는 것입니다.</p>\n<p><strong>L0 큐</strong>는 기본적으로 <strong>Round robin(Q=4ticks)</strong> 이고, <strong>L1 큐</strong> 는 <strong>Round robin(Q=8tciks)</strong> 에 <strong>priority</strong> 가 고려대상이라는 것입니다.</p>\n<p>먼저 <strong>ptable</strong>의 구조는 이전과 동일합니다. 차이점은 proc.h에 정의되어 있는 proc 구조체입니다.\n<img src=\"/uploads/e26551eaee0e952c883a23d9e95cb2d5/image.png\" alt=\"image\">\n속해있는 Q level 을 드러내는 <strong>int lev</strong>, 우선순위를 나타내는 <strong>int priority</strong>, 작동한 시간을 의미하는 <strong>int rtime</strong> (0부터 시작),</p>\n<p>이 Process가 CPU를 독점하는지 체크하는 <strong>int monopolize</strong> ( 1은 독점중,0은 독점중이 아님)등이 추가되었습니다.</p>\n<p>먼저 proc.c 안에 정의된 <strong>allocproc</strong> 함수에서\n<img src=\"/uploads/e69b06dc23d124a6b17d9a54b36b2d2a/image.png\" alt=\"image\">\n와 같은 코드로, 초기에 <strong>priority</strong>를 0으로, 초기 <strong>lev</strong>을 0으로, <strong>monopolize</strong> 값을 0으로 초기화해줍니다.</p>\n<p>이를 통해 처음 실행되는 프로세스의 우선순위를 0으로 , 그리고 가장 높은 레벨의 큐(L0)로 삽입됩니다.</p>\n<p>그 다음으로 스케쥴링을 담당하는 <strong>scheduler</strong> 함수입니다.</p>\n<p>첫번째 사진은 <strong>RUNNABLE</strong> 한 프로세스 중 <strong>L0큐</strong> 에 속해있는 프로세스의 존재를 측정하고,</p>\n<p>있다면 <strong>L0큐</strong>를 탐색하여 적절한 Process를 찾는 부분입니다.\n<img src=\"/uploads/eab780101427383ea1576f1450658d60/%E1%84%89%E1%85%B3%E1%84%8F%E1%85%B3%E1%84%85%E1%85%B5%E1%86%AB%E1%84%89%E1%85%A3%E1%86%BA_2019-04-28_21.05.37\" alt=\"image\">\n먼저 <strong>L0 큐</strong> 내에 존재하는한 <strong>적절한</strong> 프로세스의 개수를 다음과 같이 찾을수 있습니다.</p>\n<ol>\n<li>프로세스가 <strong>구동가능한 상태인가?</strong> <em><strong>(RUNNABLE)</strong></em></li>\n<li>프로세스의 <strong>큐 레벨이 0</strong>인가?</li>\n</ol>\n<p>위 두가지 조건을 모두 만족해야 <strong>적절한 프로세스</strong>라고 할수 있습니다.\n적절한 프로세스를 찾았다면, <strong>rtime</strong>을 0으로 초기화해주고 <strong>context swithcing</strong>이 일어납니다.</p>\n<p>두번째 사진은 <strong>L0 큐</strong>에 적절한 Process가 없을때 <strong>L1 큐</strong>를 탐색하고 가장 높은 Priority 를 가지는 Process를 선택하는 부분입니다.\n<img src=\"/uploads/468737b0055f688578e7701ea0d42f92/image.png\" alt=\"image\">\n프로세스를 <strong>순차적으로 돌면서</strong> <strong>L1 큐</strong>에 있는 것중에서 <strong>Priority가 가장 높은 프로세스를 선택</strong>합니다.\n그 후 그 프로세스로 <strong>context swithcing</strong>이 일어납니다.\npriority 우선순위가 같다면 , ptable을  시작에서부터 순차적으로 탐색하기때문에 <strong>FCFS</strong>로 행동합니다.</p>\n<hr>\n<h4 id=\"mlfq-구조는-trapc가-중요합니다\" style=\"position:relative;\"><a href=\"#mlfq-%EA%B5%AC%EC%A1%B0%EB%8A%94-trapc%EA%B0%80-%EC%A4%91%EC%9A%94%ED%95%A9%EB%8B%88%EB%8B%A4\" aria-label=\"mlfq 구조는 trapc가 중요합니다 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><strong>MLFQ</strong> 구조는 trap.c가 중요합니다.</h4>\n<p>trap.c에서 MLFQ와 관련해서 동작하는 것은 크게</p>\n<ol>\n<li>지금 현재 프로세스의 <strong>rtime</strong> 을 증가시키는것.</li>\n<li>지금 현재 구동중인 프로세스가 <strong>L0큐</strong>인데,<strong>rtime</strong>이 <strong>4 tick</strong> 이상이고, <strong>독점적</strong>이지 않을때 L1 큐로 강등하고 <strong>yield()</strong> 를 수행함.</li>\n<li>지금 현재 구동중인 프로세스가 <strong>L1큐</strong>인데,<strong>rtime</strong>이 <strong>8 tick</strong> 이상이고, <strong>독점적</strong>이지 않을때 <strong>priority</strong>가 0보다 크다면 1만큼 감소시키고,</li>\n</ol>\n<p><strong>yield()</strong> 을 수행.\n4. <em><strong>Starvation</strong></em>을 방지하기 위해  <strong>100 tick</strong> 마다  <strong>Priority boosting</strong>을 수행.</p>\n<p>하는 4가지로 구분 될 수 있습니다.</p>\n<p>단계별로 설명하겠습니다.</p>\n<ol>\n<li>지금 현재 프로세스의 <strong>rtime</strong>을 증가시키는것. 입니다.</li>\n</ol>\n<p><img src=\"/uploads/3932951b472e1206a7614f0b1784b069/image.png\" alt=\"image\">\n위와 같은 코드로 수행됩니다.</p>\n<p>주요 원리는 <em>TIMER interrupt는 매 tick 마다 발생</em>되므로, 그에 맞춰서 현재 구동중인 프로세스 정보를 얻어오고 그 프로세스의 <strong>rtime</strong>을 1만큼 증가시킵니다.</p>\n<ol start=\"2\">\n<li>지금 현재 구동중인 프로세스가 <strong>L0큐</strong>인데,<strong>rtime</strong>이 <strong>4 tick</strong> 이상이고, <strong>독점적</strong>이지 않을때 L1 큐로 강등하고 <strong>yield()</strong> 수행함.</li>\n</ol>\n<p><img src=\"/uploads/769d847ec85571e2656c894e7918c234/image.png\" alt=\"image\">\n위와 같은 코드로 수행됩니다.</p>\n<p>현재 레벨이 0이고, 실행된 <strong>rtime</strong>이 4tick상이고, 독점적이지 않는다면 <strong>yield()</strong> 를 호출하고 L1 큐로 강등시킵니다. <strong>yield</strong> 함수는 sched 함수를 호출하고 sched에서 scheduler가 호출되니 다음 프로세스를 스케쥴링합니다.</p>\n<ol start=\"3\">\n<li>지금 현재 구동중인 프로세스가 <strong>L1큐</strong>인데,<strong>rtime</strong>이 <strong>8 tick</strong> 이상이고, <strong>독점적</strong>이지 않을때 <strong>priority</strong>가 0보다 크다면 1만큼 감소시키고, <strong>yield()</strong> 을 수행.</li>\n</ol>\n<p><img src=\"/uploads/7b6991f3dc1d0b3abda372421e79dc34/image.png\" alt=\"image\">\n위와 같은 코드로 수행됩니다.</p>\n<p>전체적으로 두번째 L0 와 비슷하지만, priority가 0보다 크다면 1만큼 감소시키는것이 다릅니다.\n감소를 하거나 하지 않은 두가지 경우 모두에서  <strong>yield</strong>를 호출 하기 때문에 <strong>yield</strong> 함수는 sched 함수를 호출하고 sched에서 scheduler가 호출되니 다음 프로세스를 스케쥴링합니다.</p>\n<ol start=\"4\">\n<li><em><strong>Starvation</strong></em>을 방지하기 위해  <strong>100 tick</strong> 마다  <strong>Priority boosting</strong>을 수행.</li>\n</ol>\n<p><em>trap.c</em>\n<img src=\"/uploads/577c507e9e7d029a43c3eb3622b1034a/image.png\" alt=\"image\">\n<em>proc.c</em>\n<img src=\"/uploads/1541e962398dd8e7549459f4c58bbc19/image.png\" alt=\"image\"></p>\n<p>위와 같이 trap.c에서 proc.c에 정의된 priboosting 함수를 호출합니다.\npriboosting 함수는 아래에서 설명하겠지만, L1에 있는 모든 프로세스들을 L0큐로 올리고, priority를 0으로 초기화합니다.</p>\n<hr>\n<h3 id=\"mlfq-test-결과와-간단한-설명\" style=\"position:relative;\"><a href=\"#mlfq-test-%EA%B2%B0%EA%B3%BC%EC%99%80-%EA%B0%84%EB%8B%A8%ED%95%9C-%EC%84%A4%EB%AA%85\" aria-label=\"mlfq test 결과와 간단한 설명 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>MLFQ Test 결과와 간단한 설명</h3>\n<p><strong>조건 :</strong></p>\n<ol>\n<li>NUM_LOOP2를 <strong>300000(30만)</strong> 으로 수정</li>\n<li>NUM_LOOP3를 <strong>200000(20만)</strong> 으로 수정</li>\n<li>NUM_LOOP4를 <strong>500000(50만)</strong> 으로 수정</li>\n</ol>\n<blockquote>\n<p>테스트 조건을 수정한 이유는 뚜렷한 경향성을 파악하기 위해서 <strong>충분한 Iteration</strong>을 확보하기 위함입니다.</p>\n</blockquote>\n<p>첫번째 테스트 (<strong>priority를 변경하면서</strong>)\n<img src=\"/uploads/a820a54d8856832d54b9073e4fe7e338/image.png\" alt=\"image\">\n예상대로 pid 값이 더 큰 프로세스의 <strong>priority</strong>가 더 높게 설정되기 때문에, pid 값이 더 큰 프로세스가 먼저 끝나게 되고,</p>\n<p><strong>pid값이 작은 프로세스</strong> ( 사진에서 <strong>5번 프로세스 혹은 4번</strong>)가 L0에서 실행되는 시간이 긴 경향을 보입니다.</p>\n<p>두번째 테스트(<strong>priority 변경 없이</strong>)\n<img src=\"/uploads/9db208a88092082689440178e011b91b/image.png\" alt=\"image\">\n예상대로 pid 값이 작은 프로세스가 <strong>L1의 비율이 높습니다.</strong></p>\n<p>이는 , L1 큐에서는 같은 <strong>priority</strong> 를 가지는 프로세스라면 <strong>FCFS</strong>로 동작하기 때문입니다..</p>\n<p>세번째 테스트 (<strong>yield</strong>)\n<img src=\"/uploads/662f69b215d9ad034c8f2b39111e4576/image.png\" alt=\"image\">\n왠만하면 L0의 <strong>4 tick quantum</strong>을 다 사용하지 않기 때문에 시간 사용량이 초기화되니,</p>\n<p>계속 L0에 남아있게 됩니다. L0는 <strong>Round robin</strong>이기 때문에 거의 동시에 작업이 완료됩니다.</p>\n<p>네번째 테스트 (<strong>monopolize</strong>)\n<img src=\"/uploads/d5258221ee29a8b7492cb6cbadb36102/image.png\" alt=\"image\">\n<strong>monopolize</strong>라는 시스템콜을 사용한 테스트입니다.</p>\n<p>가장 큰 PID를 가진 프로세스가 CPU 독점을 요청하기 때문에 가장 큰 pid인</p>\n<p>Process 45가 CPU를 독점합니다. <strong>MLFQ</strong> 스케쥴링은 일어나지 않기 때문에\nL0의 에서 모든 작업을 완료합니다.</p>\n<p>다른 프로세스는 test2의 결과와 유사한것을 볼 수 있습니다.</p>\n<hr>\n<h4 id=\"트러블슈팅-1\" style=\"position:relative;\"><a href=\"#%ED%8A%B8%EB%9F%AC%EB%B8%94%EC%8A%88%ED%8C%85-1\" aria-label=\"트러블슈팅 1 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>트러블슈팅</h4>\n<p><strong>FCFS</strong> 와는 다르게 고려해야할 부분이 많았습니다.\n대표적으로 두가지 문제가 있었습니다.</p>\n<ol>\n<li>스케쥴링 함수를 구현할때 여러가지 조건문이 중첩됨.</li>\n<li>monopolizing의 구현</li>\n</ol>\n<p>다음과 같이 해결했습니다.</p>\n<ol>\n<li>중첩되는 모든 케이스를 명시하는것이 아니라 큰 틀에서 if문을 분기하여 처리함.</li>\n<li>현재 프로세스가 <strong>rtime</strong>을 넘겼을때 yield하는 부분에서 monopolize 체크를 위하여, proc 구조체에 플래그를 삽입함. 이를 통해 trap 함수에서 호출될때 혖현재 프로세스의 monopolize flag를 체크해서 독점적이지 않을때만 CPU 자원을 포기하도록 구현함.</li>\n</ol>\n<hr>\n<h3 id=\"시스템-콜\" style=\"position:relative;\"><a href=\"#%EC%8B%9C%EC%8A%A4%ED%85%9C-%EC%BD%9C\" aria-label=\"시스템 콜 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>시스템 콜</h3>\n<p>과제 수행을 위해 필요한 <strong>System call</strong>은 총 4개입니다.</p>\n<ol>\n<li>void yield(void)</li>\n<li>int getlev(void)</li>\n<li>void setprioirty(int pid,int priority)</li>\n<li>void monopolize(int password)</li>\n</ol>\n<p>각각의 시스템 콜 구현체를 먼저 보이고 , 공통적인 부분은 마지막에 첨부합니다</p>\n<p>첫번재로 <strong>void yield(void) 함수</strong>입니다.\n<img src=\"/uploads/cc7b7ebeee31147342bac4fc447c8399/image.png\" alt=\"image\">\nsys_yield 시스템콜은 proc.c에 정의되어 있는 yield 함수를 호출하는 것입니다. 현재 프로세스가 CPU 자원을 반납하는 행동입니다.</p>\n<p>두번째로 <strong>int getlev(void) 함수</strong>입니다. 현재 프로세스의 큐 레벨을 반환하는 것입니다.\n<img src=\"/uploads/22b75a619abe7c14e3ba7f90cac7eb76/image.png\" alt=\"image\">\n<img src=\"/uploads/9d611c6099bb9cb11315d2847e4e139e/image.png\" alt=\"image\">\ngetlev 시스템콜은 proc.c 에 정의 한 getlev 함수를 호출합니다.</p>\n<p>proc.c 에서 정의된 getlev 함수는\n현재 프로세스가 독점중인 상태라면 1을 반환하고,</p>\n<p>그렇지 않다면 현재 프로세스의 큐레벨인 <strong>lev</strong> 을 반환합니다. (<em>return myproc()->lev</em>);</p>\n<p>세번째로 <strong>void setpriority(int pid,int priority) 함수</strong>입니다.  인자로 받은 pid와 일치하는 프로세스의 priority를 인자 priority로 변경합니다.\n<img src=\"/uploads/23ba39493774781914d210c477d398c3/image.png\" alt=\"image\">\n<img src=\"/uploads/30588247bda82bef58c725830014381a/image.png\" alt=\"image\">\nsetpriority 시스템콜은 proc.c에 정의한 setprocpriority 함수를 호출합니다.</p>\n<p>proc.c에서 정의된 setprocpriority 함수는\n현재 <strong>ptable</strong>에서 <strong>인자 pid와 매칭되는 프로세스</strong>를 찾고, <strong>인자 priority로 프로세스의 priorirty를 변경</strong>합니다.<em>(targetP->priority=priority)</em></p>\n<p>시스템콜이기 때문에 argint를 이용하여 인자를 받습니다.</p>\n<p>마지막으로 <strong>void monopolize(int password) 함수</strong>입니다. 인자로 받은 password와 미리 설정한 본인의 학번과 비교한뒤 일치하면</p>\n<p>현재 프로세스를 <strong>CPU에  독점적인 권한</strong>을 가지게 변경합니다.\n<img src=\"/uploads/b888f030441243e189d3fb462ff06ebe/image.png\" alt=\"image\">\n<img src=\"/uploads/53169d6ca932811f0fa3c3a29cdfc509/image.png\" alt=\"image\">\nmonopolize 시스템콜은 proc.c에 정의한 monopolize 함수를 호출합니다.</p>\n<p>proc.c에 정의된 monopolize 함수는\n먼저 <strong>ptable</strong>의 <strong>lock을 acquire</strong>해주고</p>\n<p>현재 프로세스의 <strong>monopolize</strong>가 1이라면,<strong>독점적이라면</strong>, 인자 password를 학번 2016026599와 체크한후, <strong>일치</strong>하면</p>\n<p><strong>monopolize</strong>를 0으로 바꾸어 독점해제하고, 현재 프로세스를 L0으로 이동시키고 <strong>priority</strong>를 0으로 변경합니다.</p>\n<p><strong>일치하지 않으면</strong> 독점을 해제하고, 현재 프로세스를 kill 합니다.<em>(kill 함수의 행동과 유사하게 행동합니다)</em></p>\n<p><strong>그 후 “wrong password at calling monopolize”라고 유저에게 안내합니다.</strong></p>\n<p>현재 프로세스의 <strong>monopolize</strong>가 0이라면,<strong>독점적이 아니라면,</strong> 인자 password를 학번 2016026599와 체크한후, <strong>일치</strong>하면</p>\n<p><strong>monopolize</strong>를 1으로 바꾸어 독점을 시작하고, 현재 프로세스를 L0으로 이동시키고 <strong>priority</strong>를 0으로 변경합니다.</p>\n<p><strong>일치하지 않으면</strong> 현재 프로세스를 kill 합니다.<em>(kill 함수의 행동과 유사하게 행동합니다)</em>.</p>\n<p><strong>그 후 “wrong password at calling monopolize”라고 유저에게 안내합니다.</strong></p>\n<p>그 후 <strong>ptable</strong>의 <strong>lock을 release</strong> 해줍니다.</p>\n<hr>\n<h3 id=\"시스템-콜-공통-사항\" style=\"position:relative;\"><a href=\"#%EC%8B%9C%EC%8A%A4%ED%85%9C-%EC%BD%9C-%EA%B3%B5%ED%86%B5-%EC%82%AC%ED%95%AD\" aria-label=\"시스템 콜 공통 사항 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>시스템 콜 공통 사항</h3>\n<h4 id=\"usyss\" style=\"position:relative;\"><a href=\"#usyss\" aria-label=\"usyss permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>usys.S</h4>\n<p><img src=\"/uploads/92b6a5016c03db42c037c7af1b0b01c2/image.png\" alt=\"image\"></p>\n<h4 id=\"userh\" style=\"position:relative;\"><a href=\"#userh\" aria-label=\"userh permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>user.h</h4>\n<p><img src=\"/uploads/a30f9ec5bd91af092732925684dd4c30/image.png\" alt=\"image\"></p>\n<h4 id=\"syscallh\" style=\"position:relative;\"><a href=\"#syscallh\" aria-label=\"syscallh permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>syscall.h</h4>\n<p><img src=\"/uploads/781e6ec5276140a7c0d8148512e1c1e5/image.png\" alt=\"image\"></p>\n<h4 id=\"syscallc\" style=\"position:relative;\"><a href=\"#syscallc\" aria-label=\"syscallc permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>syscall.c</h4>\n<p><img src=\"/uploads/0ff0ba599a1337b0f08954261557bb37/image.png\" alt=\"image\">\n<img src=\"/uploads/23234e5587b29c7964f8881930350352/image.png\" alt=\"image\"></p>\n<h4 id=\"makefile-시스템-콜-부분\" style=\"position:relative;\"><a href=\"#makefile-%EC%8B%9C%EC%8A%A4%ED%85%9C-%EC%BD%9C-%EB%B6%80%EB%B6%84\" aria-label=\"makefile 시스템 콜 부분 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Makefile 시스템 콜 부분</h4>\n<p><img src=\"/uploads/9c393b59729571c56f4dc0d1a9ba272c/image.png\" alt=\"image\"></p>\n<h4 id=\"makefile-코드-분기를-위해서-삽입한-부분\" style=\"position:relative;\"><a href=\"#makefile-%EC%BD%94%EB%93%9C-%EB%B6%84%EA%B8%B0%EB%A5%BC-%EC%9C%84%ED%95%B4%EC%84%9C-%EC%82%BD%EC%9E%85%ED%95%9C-%EB%B6%80%EB%B6%84\" aria-label=\"makefile 코드 분기를 위해서 삽입한 부분 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Makefile 코드 분기를 위해서 삽입한 부분</h4>\n<p><img src=\"/uploads/daad526d1a17caec51e6678a7702cfe9/image.png\" alt=\"image\"></p>\n<p><img src=\"/uploads/88cc18596c3c38549317a9c5198088bb/image.png\" alt=\"image\"></p>\n<hr>\n<h3 id=\"시스템콜-트러블슈팅\" style=\"position:relative;\"><a href=\"#%EC%8B%9C%EC%8A%A4%ED%85%9C%EC%BD%9C-%ED%8A%B8%EB%9F%AC%EB%B8%94%EC%8A%88%ED%8C%85\" aria-label=\"시스템콜 트러블슈팅 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>시스템콜 트러블슈팅</h3>\n<p>몇가지 마이너한 이슈가 있었습니다.</p>\n<p>시스템콜의 인자를 처리할때는 <strong>argint</strong>을 사용한다는 것을 몰라 사용하지 못했고, 좀 더 자료를 찾아본 후 적용가능했습니다.</p>\n<p><strong>monopolize</strong> 함수의 처리가 <strong>trap.c 내부</strong> 에서 일어나야 할지 , <strong>proc.c 내부</strong>에서 일어나야할지 선택해야 했습니다.</p>\n<p><strong>proc 구조체</strong>를 수정해 monopolize flag 자체는 <strong>proc.c 내부에서 수정</strong>하되 <strong>trap 내부에서  체크</strong>하여 적용하는 것으로 구현했습니다.</p>\n<h3 id=\"코드\" style=\"position:relative;\"><a href=\"#%EC%BD%94%EB%93%9C\" aria-label=\"코드 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>코드</h3>\n<p><a href=\"https://github.com/BecomeWeasel/Operating-System-xv6\">Operating-System-xv6</a></p>\n<div class=\"table-of-contents\">\n<ul>\n<li>\n<p><a href=\"#%EC%9A%B4%EC%98%81%EC%B2%B4%EC%A0%9C-%EA%B3%BC%EC%A0%9C-2implementing-simple-schedulers-on-xv6\">운영체제 과제 2(implementing simple schedulers on xv6)</a></p>\n<ul>\n<li><a href=\"#%ED%85%8C%EC%8A%A4%ED%8A%B8-%ED%99%98%EA%B2%BD\">테스트 환경</a></li>\n<li><a href=\"#%EA%B0%9C%EC%9A%94\">개요</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#fcfs\">FCFS</a></p>\n<ul>\n<li><a href=\"#%EA%B3%BC%EC%A0%9C-%EB%AA%85%EC%84%B8-\">과제 명세 :</a></li>\n<li><a href=\"#%EC%9E%91%EB%8F%99%EA%B3%BC%EC%A0%95-%EC%84%A4%EB%AA%85-\">작동과정 설명 :</a></li>\n<li><a href=\"#fcfs-test--%EA%B2%B0%EA%B3%BC%EC%99%80-%EA%B0%84%EB%8B%A8%ED%95%9C-%EC%84%A4%EB%AA%85\">FCFS Test  결과와 간단한 설명</a></li>\n<li><a href=\"#%ED%8A%B8%EB%9F%AC%EB%B8%94%EC%8A%88%ED%8C%85\">트러블슈팅</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#mlfq-multi-level-feedback-queue\">MLFQ (Multi Level Feedback Queue)</a></p>\n<ul>\n<li>\n<p><a href=\"#%EA%B3%BC%EC%A0%9C-%EB%AA%85%EC%84%B8--1\">과제 명세 :</a></p>\n</li>\n<li>\n<p><a href=\"#%EC%9E%91%EB%8F%99-%EA%B3%BC%EC%A0%95-%EC%84%A4%EB%AA%85\">작동 과정 설명:</a></p>\n<ul>\n<li><a href=\"#mlfq-%EA%B5%AC%EC%A1%B0%EB%8A%94-trapc%EA%B0%80-%EC%A4%91%EC%9A%94%ED%95%A9%EB%8B%88%EB%8B%A4\"><strong>MLFQ</strong> 구조는 trap.c가 중요합니다.</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#mlfq-test-%EA%B2%B0%EA%B3%BC%EC%99%80-%EA%B0%84%EB%8B%A8%ED%95%9C-%EC%84%A4%EB%AA%85\">MLFQ Test 결과와 간단한 설명</a></p>\n<ul>\n<li><a href=\"#%ED%8A%B8%EB%9F%AC%EB%B8%94%EC%8A%88%ED%8C%85-1\">트러블슈팅</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#%EC%8B%9C%EC%8A%A4%ED%85%9C-%EC%BD%9C\">시스템 콜</a></p>\n</li>\n<li>\n<p><a href=\"#%EC%8B%9C%EC%8A%A4%ED%85%9C-%EC%BD%9C-%EA%B3%B5%ED%86%B5-%EC%82%AC%ED%95%AD\">시스템 콜 공통 사항</a></p>\n<ul>\n<li><a href=\"#usyss\">usys.S</a></li>\n<li><a href=\"#userh\">user.h</a></li>\n<li><a href=\"#syscallh\">syscall.h</a></li>\n<li><a href=\"#syscallc\">syscall.c</a></li>\n<li><a href=\"#makefile-%EC%8B%9C%EC%8A%A4%ED%85%9C-%EC%BD%9C-%EB%B6%80%EB%B6%84\">Makefile 시스템 콜 부분</a></li>\n<li><a href=\"#makefile-%EC%BD%94%EB%93%9C-%EB%B6%84%EA%B8%B0%EB%A5%BC-%EC%9C%84%ED%95%B4%EC%84%9C-%EC%82%BD%EC%9E%85%ED%95%9C-%EB%B6%80%EB%B6%84\">Makefile 코드 분기를 위해서 삽입한 부분</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#%EC%8B%9C%EC%8A%A4%ED%85%9C%EC%BD%9C-%ED%8A%B8%EB%9F%AC%EB%B8%94%EC%8A%88%ED%8C%85\">시스템콜 트러블슈팅</a></p>\n</li>\n<li>\n<p><a href=\"#%EC%BD%94%EB%93%9C\">코드</a></p>\n</li>\n</ul>\n</li>\n</ul>\n</div>","frontmatter":{"date":"April 28, 2019","title":"운영체제 과제 2 (Implementing simple schedulers on xv6)","categories":"운영체제","author":"weasel","emoji":"💻"},"fields":{"slug":"/os-xv6-scheduler/"}},"prev":{"id":"5d077397-5291-5ba2-8fbc-ceb75966ec5d","html":"<h2 id=\"운영체제-과제-4double-indirect-inode\" style=\"position:relative;\"><a href=\"#%EC%9A%B4%EC%98%81%EC%B2%B4%EC%A0%9C-%EA%B3%BC%EC%A0%9C-4double-indirect-inode\" aria-label=\"운영체제 과제 4double indirect inode permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>운영체제 과제 4(double indirect inode)</h2>\n<hr>\n<h3 id=\"테스트-환경\" style=\"position:relative;\"><a href=\"#%ED%85%8C%EC%8A%A4%ED%8A%B8-%ED%99%98%EA%B2%BD\" aria-label=\"테스트 환경 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>테스트 환경</h3>\n<ul>\n<li>OS : Ubuntu 16.04</li>\n<li>gcc : gcc 5.4.0</li>\n</ul>\n<h3 id=\"개요\" style=\"position:relative;\"><a href=\"#%EA%B0%9C%EC%9A%94\" aria-label=\"개요 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>개요</h3>\n<p>운영체제 네번째 과제인 <strong>double indirect inode</strong>에 대한 내용입니다.</p>\n<p>크게 <strong>fs.c</strong>안의 <strong>bmap , itrunc</strong>함수를 수정하고, <strong>fs.h</strong>와 <strong>file.h</strong>, <strong>param.h</strong>의 값을 조금 수정함으로써 <strong>double indirect inode</strong>를 구현합니다.</p>\n<hr>\n<h3 id=\"과제-명세\" style=\"position:relative;\"><a href=\"#%EA%B3%BC%EC%A0%9C-%EB%AA%85%EC%84%B8\" aria-label=\"과제 명세 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>과제 명세</h3>\n<p>먼저 xv6의 기본적인 inode의 구조에 대한 간단한 구조입니다.\n<img src=\"/uploads/3bdfe834c00520bc22f3a31fc4fb530b/image.png\" alt=\"image\"></p>\n<p><strong>dinode</strong> 구조체에서 <strong>direct block pointer는 12개</strong>가 존재하고, 1개의 <strong>indirect block pointer</strong>가 존재합니다.</p>\n<p>그런 구조를 아래와 같이 수정해야합니다.\n<img src=\"/uploads/5dff876b79e7864b6b3ef8462395de38/image.png\" alt=\"image\"></p>\n<p><strong>dinode</strong> 구조체에서 <strong>direct block pointer</strong>가 11개로 바뀌고, 1개의 <strong>single indirect block pointer</strong>, 그리고 1개의 <strong>dobule indirect block pointer</strong>가 존재합니다.</p>\n<p>구현하기 위해서는 <strong>bmap</strong>과 <strong>itrunc</strong> 함수를 수정해야 합니다.\n<img src=\"/uploads/61a8e0b92fdb2c4d83e409c92ac022cc/image.png\" alt=\"image\"></p>\n<hr>\n<h2 id=\"fsh-수정-사항\" style=\"position:relative;\"><a href=\"#fsh-%EC%88%98%EC%A0%95-%EC%82%AC%ED%95%AD\" aria-label=\"fsh 수정 사항 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>fs.h 수정 사항</h2>\n<p><strong>fs.h</strong>에서 NDIRECT의 값을 1만큼 줄여주고 <strong>(12->11)</strong>,</p>\n<p><strong>NDOUBLEINDIRECT</strong> 의 값을 <strong>NINDIRECT의 제곱</strong>으로 정의합니다.</p>\n<p><strong>addrs 배열</strong>의 크기를 NDIRECT의 값과 매치되게 수정합니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">( addrs[NDIRECT+1]->addrs[NDIRECT+2])</code></pre></div>\n<p><img src=\"/uploads/43bffc1ffc7cf0b5f2b0dbd800c9f009/image.png\" alt=\"image\"></p>\n<p>이렇게 작성하면 <strong>direct block pointer</strong>의 개수는 11개로 줄어들고,\n<strong>single(addrs[11]),</strong> <strong>dobule indirect block pointer(addrs[12])</strong> 가 만들어집니다.</p>\n<h2 id=\"fileh-paramh-수정-사항\" style=\"position:relative;\"><a href=\"#fileh-paramh-%EC%88%98%EC%A0%95-%EC%82%AC%ED%95%AD\" aria-label=\"fileh paramh 수정 사항 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>file.h, param.h 수정 사항</h2>\n<p><strong>inode</strong>의 구조체 안에 있는 addrs 배열도 <strong>dinode</strong>에서 addrs 배열을 수정한것과 같이 수정해줍니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">( addrs[NDIRECT+1]->addrs[NDIRECT+2])</code></pre></div>\n<p>param.h 안의 <strong>FSSIZE</strong> 값도 20000이상인 <strong>30000</strong>으로 수정해줍니다.</p>\n<hr>\n<h2 id=\"fsc-수정-사항\" style=\"position:relative;\"><a href=\"#fsc-%EC%88%98%EC%A0%95-%EC%82%AC%ED%95%AD\" aria-label=\"fsc 수정 사항 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>fs.c 수정 사항</h2>\n<p>먼저 <strong>bmap</strong> 함수를 수정했습니다.\n기존의 bmap 함수를 최대한 참고하여 , double indirect block pointer의 역할을 수행할 수 있게 수행했습니다.</p>\n<p><img src=\"/uploads/23b449c7b9ac04f9d8c55518d04958f8/image.png\" alt=\"image\"></p>\n<p>그 후에는 <strong>itrunc</strong> 함수를 수정했습니다.\n기존의 iturnc 함수를 참조하고, double indirect이기 때문에 두번의 for문이 필요한 구조입니다.\n<img src=\"/uploads/326cba548f07bc28e8f1befa92b60e9d/image.png\" alt=\"image\"></p>\n<hr>\n<h3 id=\"file_test-결과\" style=\"position:relative;\"><a href=\"#file_test-%EA%B2%B0%EA%B3%BC\" aria-label=\"file_test 결과 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>file_test 결과</h3>\n<p><strong>file_test</strong>는 T1,T2,T3로 구성되어 있습니다.</p>\n<p>T1은 파일에 8MB정도의 크기를 쓰고, T2는 8MB의 크기를 읽고 T3는 T1과 T2를 10회 정도 반복해서 전체적인 구조에서 문제가 생기지 않는지를 체크합니다.</p>\n<p><img src=\"/uploads/a27d382868d935ff50e9083e053c6621/%E1%84%89%E1%85%B3%E1%84%8F%E1%85%B3%E1%84%85%E1%85%B5%E1%86%AB%E1%84%89%E1%85%A3%E1%86%BA_2019-06-21_17.01.07\" alt=\"image\"></p>\n<p>위의 그림과 같이 큰 문제 없이 T1과 T2,T3를 통과합니다. 여러번의 file_test를 시도해도</p>\n<p>테스트는 성공적으로 종료됩니다.</p>\n<hr>\n<h3 id=\"추가-구현점과-문제점\" style=\"position:relative;\"><a href=\"#%EC%B6%94%EA%B0%80-%EA%B5%AC%ED%98%84%EC%A0%90%EA%B3%BC-%EB%AC%B8%EC%A0%9C%EC%A0%90\" aria-label=\"추가 구현점과 문제점 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>추가 구현점과 문제점</h3>\n<p>눈에 보이는 큰 문제점은 없습니다. 추가 구현점이라면 ,</p>\n<p>Project 3(LWP)에서 만들었던 Thread의 개념을 응용해 <strong>multi-thread</strong> 환경에서 파일을 읽고 쓰는 기능을 만들수 있을것 같습니다.</p>\n<h3 id=\"코드\" style=\"position:relative;\"><a href=\"#%EC%BD%94%EB%93%9C\" aria-label=\"코드 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>코드</h3>\n<p><a href=\"https://github.com/BecomeWeasel/Operating-System-xv6\">Operating-System-xv6</a></p>\n<div class=\"table-of-contents\">\n<ul>\n<li>\n<p><a href=\"#%EC%9A%B4%EC%98%81%EC%B2%B4%EC%A0%9C-%EA%B3%BC%EC%A0%9C-4double-indirect-inode\">운영체제 과제 4(double indirect inode)</a></p>\n<ul>\n<li><a href=\"#%ED%85%8C%EC%8A%A4%ED%8A%B8-%ED%99%98%EA%B2%BD\">테스트 환경</a></li>\n<li><a href=\"#%EA%B0%9C%EC%9A%94\">개요</a></li>\n<li><a href=\"#%EA%B3%BC%EC%A0%9C-%EB%AA%85%EC%84%B8\">과제 명세</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#fsh-%EC%88%98%EC%A0%95-%EC%82%AC%ED%95%AD\">fs.h 수정 사항</a></p>\n</li>\n<li>\n<p><a href=\"#fileh-paramh-%EC%88%98%EC%A0%95-%EC%82%AC%ED%95%AD\">file.h, param.h 수정 사항</a></p>\n</li>\n<li>\n<p><a href=\"#fsc-%EC%88%98%EC%A0%95-%EC%82%AC%ED%95%AD\">fs.c 수정 사항</a></p>\n<ul>\n<li><a href=\"#file_test-%EA%B2%B0%EA%B3%BC\">file_test 결과</a></li>\n<li><a href=\"#%EC%B6%94%EA%B0%80-%EA%B5%AC%ED%98%84%EC%A0%90%EA%B3%BC-%EB%AC%B8%EC%A0%9C%EC%A0%90\">추가 구현점과 문제점</a></li>\n<li><a href=\"#%EC%BD%94%EB%93%9C\">코드</a></li>\n</ul>\n</li>\n</ul>\n</div>","frontmatter":{"date":"June 21, 2019","title":"운영체제 과제 4 (Double indirect inode)","categories":"운영체제","author":"weasel","emoji":"💻"},"fields":{"slug":"/os-xv6-double-indirect-node/"}},"site":{"siteMetadata":{"siteUrl":"https://becomeweasel.me","comments":{"utterances":{"repo":"BecomeWeasel/BecomeWeasel.github.io"}}}}},"pageContext":{"slug":"/os-xv6-thread/","nextSlug":"/os-xv6-scheduler/","prevSlug":"/os-xv6-double-indirect-node/"}},
    "staticQueryHashes": ["1073350324","1956554647","2938748437"]}